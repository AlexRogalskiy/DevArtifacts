// Generated by CoffeeScript 1.12.7
(function() {
  var Calc, Clock, Options,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Calc = (function() {
    function Calc() {}

    Calc.circle = Math.PI * 2;

    Calc.origin = -Math.PI / 2;

    Calc.getPointFromAngle = function(origin, angle, distance) {
      if (angle == null) {
        angle = 0;
      }
      if (distance == null) {
        distance = 0;
      }
      return {
        x: distance * Math.cos(angle) + origin.x,
        y: distance * Math.sin(angle) + origin.y
      };
    };

    return Calc;

  })();

  Options = (function() {
    Options.prototype.lineColor = '#000';

    Options.prototype.fillColor = '#fff';

    Options.prototype.bgColor = '#fff';

    function Options(options) {
      var key, value;
      if (options == null) {
        options = {};
      }
      for (key in options) {
        value = options[key];
        if (value != null) {
          this[key] = value;
        }
      }
      this.updateSize();
      this.$canvas = $('canvas');
      this.canvas = this.$canvas.get(0);
      this.context = this.canvas.getContext('2d');
    }

    Options.prototype.updateSize = function() {
      var $window, height, width;
      $window = $(window);
      width = Math.max(800, $window.width());
      height = Math.max(600, $window.height());
      if (!(width !== this.width || height !== this.height)) {
        return false;
      }
      this.height = height;
      this.width = width;
      this.size = Math.min(this.width, this.height);
      this.part = this.size / 2 / 6.25;
      this.hourWidth = this.part * 3;
      this.center = {
        x: this.width / 2,
        y: this.height / 2
      };
      return true;
    };

    return Options;

  })();

  Clock = (function() {
    function Clock(options) {
      this.redraw = bind(this.redraw, this);
      this.options = new Options(options);
      this.canvas = this.options.canvas;
      this.context = this.options.context;
      this.prepareCanvas();
      this.createElements();
      setInterval(this.redraw, Math.round(1000 / 20));
      this.redraw();
      $(window).resize((function(_this) {
        return function() {
          if (_this.options.updateSize()) {
            return _this.prepareCanvas();
          }
        };
      })(this));
    }

    Clock.prototype.prepareCanvas = function() {
      return this.options.$canvas.css({
        width: this.options.width,
        height: this.options.height,
        background: this.options.bgColor
      }).attr({
        width: this.options.width,
        height: this.options.height
      });
    };

    Clock.prototype.createElements = function() {
      return $(document.body).append(this.$hours = $('<div>').css({
        position: 'absolute',
        textAlign: 'center',
        color: this.options.lineColor,
        fontFamily: 'Segoe UI Light, Helvetica Neue, sans-serif',
        fontWeight: 100
      }), this.$mins = $('<div>').css({
        position: 'absolute',
        textAlign: 'center',
        color: this.options.lineColor,
        fontFamily: 'Segoe UI Light, Helvetica Neue, sans-serif',
        fontWeight: 100
      }), this.$secs = $('<div>').css({
        position: 'absolute',
        textAlign: 'center',
        color: this.options.lineColor,
        fontFamily: 'Segoe UI Light, Helvetica Neue, sans-serif',
        fontWeight: 100
      }));
    };

    Clock.prototype.redraw = function(now) {
      var hourAngle, hourSize, minSize, minuteAngle, minuteCenter, msAngle, msCenter, msHalf, msHour, msMin, msNow, msSec, msSize, secSize, secondAngle, secondCenter;
      if (now == null) {
        now = new Date;
      }
      msSec = 1000;
      msMin = msSec * 60;
      msHour = msMin * 60;
      msHalf = msHour * 12;
      msNow = (now.getHours() % 12) * msHour + now.getMinutes() * msMin + now.getSeconds() * msSec + now.getMilliseconds();
      this.context.clearRect(0, 0, this.options.width, this.options.height);
      hourAngle = this.getAngle(msHalf, msNow);
      hourSize = this.options.hourWidth;
      this.drawHand(this.options.center, hourAngle, hourSize);
      this.$hours.html((Math.floor(msNow / msHour) || 12) + "<sub>h</sub>").css({
        top: this.options.center.y - hourSize * 0.5,
        left: this.options.center.x - hourSize * 0.5,
        height: hourSize,
        width: hourSize,
        lineHeight: hourSize + 'px',
        fontSize: hourSize * 0.3 + 'px'
      });
      minuteAngle = this.getAngle(msHour, msNow % msHour);
      minuteCenter = Calc.getPointFromAngle(this.options.center, hourAngle, hourSize);
      minSize = hourSize / 2;
      this.drawHand(minuteCenter, minuteAngle, minSize);
      this.$mins.html((Math.floor(msNow % msHour / msMin)) + "<sub>m</sub>").css({
        top: minuteCenter.y - minSize * 0.5,
        left: minuteCenter.x - minSize * 0.5,
        height: minSize,
        width: minSize,
        lineHeight: minSize + 'px',
        fontSize: minSize * 0.3 + 'px'
      });
      secondAngle = this.getAngle(msMin, msNow % msMin);
      secondCenter = Calc.getPointFromAngle(minuteCenter, minuteAngle, minSize);
      secSize = minSize / 2;
      this.drawHand(secondCenter, secondAngle, secSize);
      this.$secs.html((Math.floor(msNow % msMin / msSec)) + "<sub>s</sub>").css({
        top: secondCenter.y - secSize * 0.5,
        left: secondCenter.x - secSize * 0.5,
        height: secSize,
        width: secSize,
        lineHeight: secSize + 'px',
        fontSize: secSize * 0.3 + 'px'
      });
      msAngle = this.getAngle(msSec, msNow % msSec);
      msCenter = Calc.getPointFromAngle(secondCenter, secondAngle, secSize);
      msSize = secSize / 2;
      return this.drawHand(msCenter, msAngle, msSize, true);
    };

    Clock.prototype.getAngle = function(total, parts) {
      var angle;
      return angle = parts / total * Calc.circle + Calc.origin;
    };

    Clock.prototype.drawHand = function(center, angle, size, end) {
      var endpoint, radius;
      radius = size * 0.4;
      endpoint = Calc.getPointFromAngle(center, angle, size);
      this.drawHandArc(center, angle, size * 0.55);
      if (!end) {
        this.drawHandLine(center, Calc.getPointFromAngle(center, Calc.origin, size * 0.65));
      }
      if (!end) {
        this.drawHandLine(center, endpoint);
      }
      return this.drawHandTip(center, radius);
    };

    Clock.prototype.drawHandArc = function(center, angle, size) {
      this.context.fillStyle = this.options.fillColor;
      this.context.strokeStyle = this.options.lineColor;
      this.context.lineWidth = 1;
      this.begin();
      this.move(center);
      this.arc(center, size, Calc.origin, angle);
      this.close();
      this.fill();
      return this.stroke();
    };

    Clock.prototype.drawHandLine = function(point1, point2) {
      this.context.strokeStyle = this.options.lineColor;
      this.context.lineWidth = 2;
      this.begin();
      this.move(point1);
      this.line(point2);
      return this.stroke();
    };

    Clock.prototype.drawHandTip = function(center, radius) {
      this.context.fillStyle = this.options.bgColor;
      this.context.strokeStyle = this.options.lineColor;
      this.context.lineWidth = 2;
      this.begin();
      this.arc(center, radius, 0, Calc.circle);
      this.fill();
      return this.stroke();
    };

    Clock.prototype.begin = function() {
      return this.context.beginPath();
    };

    Clock.prototype.close = function() {
      return this.context.closePath();
    };

    Clock.prototype.fill = function() {
      return this.context.fill();
    };

    Clock.prototype.stroke = function() {
      return this.context.stroke();
    };

    Clock.prototype.move = function(point) {
      return this.context.moveTo(point.x, point.y);
    };

    Clock.prototype.line = function(point) {
      return this.context.lineTo(point.x, point.y);
    };

    Clock.prototype.arc = function(point, radius, angle1, angle2, counter) {
      return this.context.arc(point.x, point.y, radius, angle1, angle2, counter);
    };

    return Clock;

  })();

  $(function() {
    return new Clock;
  });

}).call(this);
