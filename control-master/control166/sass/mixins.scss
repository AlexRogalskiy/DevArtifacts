@charset "UTF-8";

/* 
 * Gradient
 */
@mixin gradient ($from: #000, $to: #fff, $alphafrom: 0%, $alphato: 100%) {
  	background-color: $from;
  	background-image: -webkit-gradient(linear, left top, left bottom, from($from), to($to));
 	background-image: -webkit-linear-gradient(top, $from $alphafrom, $to $alphato);
  	background-image:    -moz-linear-gradient(top, $from $alphafrom, $to $alphato);
	background-image:     -ms-linear-gradient(top, $from $alphafrom, $to $alpahto);
  	background-image:      -o-linear-gradient(top, $from $alphafrom, $to $alphato);
  	background-image:         linear-gradient(to bottom, $from $alphafrom, $to $alphato);
}

@mixin flex($direction, $alignment, $justify, $wrap) {
	display: flex;
	flex-direction: $direction;
	flex-wrap: $wrap;
	justify-content: $justify;
	align-content: $alignment;
	align-items: $alignment;
}

@mixin gradient ($color: #F5F5F5, $start: #EEE, $stop: #FFF) {
  	background: $color;
  	background: -webkit-gradient(linear,
                               left bottom,
                               left top,
                               color-stop(0, $start),
                               color-stop(1, $stop));
  	background: -ms-linear-gradient(bottom,
                                  $start,
                                  $stop);
  	background: -moz-linear-gradient(center bottom,
                                   $start 0%,
                                   $stop 100%);
  	background: -o-linear-gradient($stop,
                                 $start);
  	//filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=0)",$stop,$start));
}

@mixin vertical-gradient ($startColor: #aaa, $stopColor: #000) {
    background: mix($startColor, $stopColor, 50%);
    background: -moz-linear-gradient(top, $startColor 0%, $stopColor 100%);
    background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,$startColor), color-stop(100%,$stopColor));
    background: -webkit-linear-gradient(top,  $startColor 0%,$stopColor 100%);
    background: -o-linear-gradient(top, $startColor 0%, $stopColor 100%);
    background: -ms-linear-gradient(top, $startColor 0%, $stopColor 100%); 
    background: linear-gradient(to bottom, $startColor 0%, $stopColor 100%);
    //filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=0)",$startColor,$stopColor));
}

@mixin horizontal-gradient ($startColor: #aaa, $stopColor: #000) {
    background: mix($startColor, $stopColor, 50%);
    background: -moz-linear-gradient(left, $startColor 0%, $stopColor 100%);
    background: -webkit-gradient(linear, left top, right top, color-stop(0%,$startColor), color-stop(100%,$stopColor));
    background: -webkit-linear-gradient(left,  $startColor 0%,$stopColor 100%);
    background: -o-linear-gradient(left, $startColor 0%, $stopColor 100%);
    background: -ms-linear-gradient(top, $startColor 0%, $stopColor 100%);
    background: linear-gradient(to right, $startColor 0%, $stopColor 100%);
    //filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=1)",$startColor,$stopColor));
}

@mixin directional-gradient ($startColor: #aaa, $stopColor: #000, $deg: 45deg) {
    background-image: -moz-linear-gradient($deg, $startColor, $stopColor);
    background-image: -webkit-linear-gradient($deg, $startColor, $stopColor);
    background-image: -o-linear-gradient($deg, $startColor, $stopColor); 
    background-image: linear-gradient($deg, $startColor, $stopColor);
    background-color: mix($startColor, $stopColor, 60%);
    background-repeat: repeat-x;
}

@mixin radial-gradient ($innerColor: #aaa, $outerColor: #000) {
      background-image: -webkit-gradient(radial, center center, 0, center center, 460, from($innerColor), to($outerColor));
      background-image: -webkit-radial-gradient(circle, $innerColor, $outerColor);
      background-image: -moz-radial-gradient(circle, $innerColor, $outerColor);
      background-image: -o-radial-gradient(circle, $innerColor, $outerColor);
      background-color: mix($innerColor, $outerColor, 60%);
      background-repeat: no-repeat;
}

@mixin bw-gradient ($color: #F5F5F5, $start: 0, $stop: 255) {
  	background: $color;
  	background: -webkit-gradient(linear,
                               left bottom,
                               left top,
                               color-stop(0, rgb($start,$start,$start)),
                               color-stop(1, rgb($stop,$stop,$stop)));
  	background: -ms-linear-gradient(bottom,
                                  rgb($start,$start,$start) 0%,
                                  rgb($stop,$stop,$stop) 100%);
  	background: -moz-linear-gradient(center bottom,
                                   rgb($start,$start,$start) 0%,
                                   rgb($stop,$stop,$stop) 100%);
  	background: -o-linear-gradient(rgb($stop,$stop,$stop),
                                 rgb($start,$start,$start));
  	//filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=0)",rgb($stop,$stop,$stop),rgb($start,$start,$start)));
}

/* 
 * Opacity
 */
@mixin opacity ($opacity: 0.5) {
  	-webkit-opacity: $opacity;
  	 -khtml-opacity: $opacity;
       -moz-opacity: $opacity;
            opacity: $opacity;
  	$opacity_: $opacity * 100;
//  	-ms-filter: ~"progid:DXImageTransform.Microsoft.Alpha(opacity=${opacity_})";
	//filter: ~"alpha(opacity=${opacity_})";
}

/* 
 * Box shadow
 */
@mixin box-shadow ($shadow) {
    -webkit-box-shadow: $shadow;
       -moz-box-shadow: $shadow;
        -ms-box-shadow: $shadow;
         -o-box-shadow: $shadow;
            box-shadow: $shadow;
}

@mixin box-shadow ($x: 0, $y: 0, $blur: 10px, $color: #666) {
  	-webkit-box-shadow: $arguments;
  	   -moz-box-shadow: $arguments;
  	   	-ms-box-shadow: $arguments;
  	   	 -o-box-shadow: $arguments;
       	    box-shadow: $arguments;
}

@mixin box-shadow-inset ($x: 0, $y: 0, $blur: 10px, $color: #666) {
  	-webkit-box-shadow: inset $x $y $blur $color;
  	   -moz-box-shadow: inset $x $y $blur $color;
  	    -ms-box-shadow: inset $x $y $blur $color;
  	     -o-box-shadow: inset $x $y $blur $color;
            box-shadow: inset $x $y $blur $color;
}

@mixin box-shadow ($x: 0, $y: 0, $blur: 10px, $color: #666) {
  	-webkit-box-shadow: $x $y $blur $color;
  	   -moz-box-shadow: $x $y $blur $color;
  	    -ms-box-shadow: $x $y $blur $color;
  	     -o-box-shadow: $x $y $blur $color;
            box-shadow: $x $y $blur $color;
}

@mixin box-shadow-inset-alpha ($x: 0, $y: 0, $blur: 10px, $alpha: 0.1) {
  	-webkit-box-shadow: inset $x $y $blur rgba(0, 0, 0, $alpha);
       -moz-box-shadow: inset $x $y $blur rgba(0, 0, 0, $alpha);
        -ms-box-shadow: inset $x $y $blur rgba(0, 0, 0, $alpha);
  		   -o-box-shadow: inset $x $y $blur rgba(0, 0, 0, $alpha);
			      box-shadow: inset $x $y $blur rgba(0, 0, 0, $alpha);
}

@mixin box-shadow-alpha ($x: 0, $y: 0, $blur: 10px, $alpha: 0.1) {
  	-webkit-box-shadow: $x $y $blur rgba(0, 0, 0, $alpha);
  	   -moz-box-shadow: $x $y $blur rgba(0, 0, 0, $alpha);
  	    -ms-box-shadow: $x $y $blur rgba(0, 0, 0, $alpha);
  	     -o-box-shadow: $x $y $blur rgba(0, 0, 0, $alpha);
  			    box-shadow: $x $y $blur rgba(0, 0, 0, $alpha);
}

/* 
 * Box sizing
 */
@mixin box-sizing ($type: border-box) {
    -webkit-box-sizing: $type;
       -moz-box-sizing: $type;
        -ms-box-sizing: $type;
         -o-box-sizing: $type;
            box-sizing: $type;
}

/* 
 * Text shadow
 */
@mixin text-shadow ($x: 1px, $y: 1px, $radius: 2px, $color: #000) {
  	-webkit-text-shadow: $arguments;
       -moz-text-shadow: $arguments;
        -ms-text-shadow: $arguments;
         -o-text-shadow: $arguments;
          	text-shadow: $arguments;
}

/* 
 * Column
 */
@mixin column ($count: 3, $gap: 1em, $color: 1px solid #c4c8cc) {
  	-webkit-column-count: $count; -webkit-column-gap: $gap; -webkit-column-rule: $rule;
       -moz-column-count: $count;    -moz-column-gap: $gap; -moz-column-rule: $rule;
       	-ms-column-count: $count;     -ms-column-gap: $gap; -ms-column-rule: $rule;
       	 -o-column-count: $count;      -o-column-gap: $gap; -o-column-gap: $rule;
            column-count: $count;         column-gap: $gap; column-rule: $rule;
}

/* 
 * Transition
 */
@mixin transition ($property: all, $duration: 0.2s, $function: linear) {
  	-webkit-transition: $arguments;
       -moz-transition: $arguments;
       	-ms-transition: $arguments;
       	 -o-transition: $arguments;
            transition: $arguments;
}

@mixin transition ($value) {
  	-webkit-transition: $value;
       -moz-transition: $value;
       	-ms-transition: $value;
       	 -o-transition: $value;
            transition: $value;
}

@mixin transition-duration ($duration: 0.2s) {
	    -webkit-transition-duration: $duration;
  	     -moz-transition-duration: $duration;
  		    -ms-transition-duration: $duration;
  		     -o-transition-duration: $duration;
  			      transition-duration: $duration;
}

@mixin transition-delay ($transition-delay) {
    -webkit-transition-delay: $transition-delay;
       -moz-transition-delay: $transition-delay;
        -ms-transition-delay: $transition-delay;
         -o-transition-delay: $transition-delay;
            transition-delay: $transition-delay;
}

/* 
 * Transform
 */
@mixin transform ($transform) {
  	-webkit-transform: $transform;
       -moz-transform: $transform;
        -ms-transform: $transform;
         -o-transform: $transform;
            transform: $transform;
}

@mixin rotation ($deg: 5deg) {
  	@include transform(rotate($deg));
}

@mixin scale ($ratio: 1.5){
	@include transform(scale($ratio));
}

@mixin translate ($x: 0, $y: 0) {
  	@include transform(translate($x, $y));
}

// @include transform-tilt; 
@mixin transform-tilt () {
  $tilt: rotate(15deg);
  -webkit-transform: $tilt; /* Ch <36, Saf 5.1+, iOS, An =<4.4.4 */
     -moz-transform: $tilt;
      -ms-transform: $tilt; /* IE 9 */
	   -o-transform: $tilt;
          transform: $tilt; /* IE 10, Fx 16+, Op 12.1+ */
}

/* 
 * Borders
 */
@mixin border-radius ($radius: 3px) {
  	-webkit-border-radius: $radius;
  	   -moz-border-radius: $radius;
  	    -ms-border-radius: $radius;
  		 -o-border-radius: $radius;
  		    border-radius: $radius;
			
  	@include background-clip(padding-box);
}

@mixin border-radius ($topright: 0, $bottomright: 0, $bottomleft: 0, $topleft: 0) {
  	-webkit-border-top-right-radius: $topright;
  	-webkit-border-bottom-right-radius: $bottomright;
  	-webkit-border-bottom-left-radius: $bottomleft;
  	-webkit-border-top-left-radius: $topleft;

  	-moz-border-radius-topright: $topright;
  	-moz-border-radius-bottomright: $bottomright;
  	-moz-border-radius-bottomleft: $bottomleft;
  	-moz-border-radius-topleft: $topleft;

  	-ms-border-radius-topright: $topright;
  	-ms-border-radius-bottomright: $bottomright;
  	-ms-border-radius-bottomleft: $bottomleft;
  	-ms-border-radius-topleft: $topleft;

  	-o-border-radius-topright: $topright;
  	-o-border-radius-bottomright: $bottomright;
  	-o-border-radius-bottomleft: $bottomleft;
  	-o-border-radius-topleft: $topleft;

  	border-top-right-radius: $topright;
  	border-bottom-right-radius: $bottomright;
  	border-bottom-left-radius: $bottomleft;
  	border-top-left-radius: $topleft;
	
  	@include background-clip(padding-box);
}

@mixin border ($top-color: #EEE, $right-color: #EEE, $bottom-color: #EEE, $left-color: #EEE) {
  	border-top: solid 1px $top-color;
   	border-left: solid 1px $left-color;
  	border-right: solid 1px $right-color;
  	border-bottom: solid 1px $bottom-color;
}

/* 
 * User selection
 */
@mixin user-select ($select: none) {
  	-webkit-user-select: $select;
  	   -moz-user-select: $select;
  	  	-ms-user-select: $select;
  	   	 -o-user-select: $select;
  		      user-select: $select;
}

/* 
 * Columns
 */
@mixin columns ($colwidth: 250px, $colcount: 0, $colgap: 50px, $columnRuleColor: #EEE, $columnRuleStyle: solid, $columnRuleWidth: 1px) {
  	-webkit-column-width: $colwidth;
  	-webkit-column-count: $colcount;
  	-webkit-column-gap: $colgap;
  	-webkit-column-rule-color: $columnRuleColor;
  	-webkit-column-rule-style: $columnRuleStyle;
  	-webkit-column-rule-width: $columnRuleWidth;

  	-moz-column-width: $colwidth;
  	-moz-column-count: $colcount;
  	-moz-column-gap: $colgap;
  	-moz-column-rule-color: $columnRuleColor;
  	-moz-column-rule-style: $columnRuleStyle;
  	-moz-column-rule-width: $columnRuleWidth;

  	-ms-column-width: $colwidth;
  	-ms-column-count: $colcount;
  	-ms-column-gap: $colgap;
  	-ms-column-rule-color: $columnRuleColor;
  	-ms-column-rule-style: $columnRuleStyle;
  	-ms-column-rule-width: $columnRuleWidth;

  	-o-column-width: $colwidth;
  	-o-column-count: $colcount;
  	-o-column-gap: $colgap;
  	-o-column-rule-color: $columnRuleColor;
  	-o-column-rule-style: $columnRuleStyle;
  	-o-column-rule-width: $columnRuleWidth;

  	column-width: $colwidth;
  	column-count: $colcount;
  	column-gap: $colgap;
  	column-rule-color: $columnRuleColor;
  	column-rule-style: $columnRuleStyle;
  	column-rule-width: $columnRuleWidth;
}

/* 
 * Background clip
 */
@mixin background-clip ($argument: padding-box) {
	  -webkit-background-clip: $argument;
		   -moz-background-clip: $argument;
  		  -ms-background-clip: $argument;
  		   -o-background-clip: $argument;
   			    background-clip: $argument;
}

/* 
 * Size
 */
@mixin size ($w, $h) {
    width: $w;
    height: $h;
}

@mixin square ($size) {
    width: $size;
    height: $size;
}

/* 
 * Alignment
 */
@mixin center () {
    margin-left: auto;
    margin-right: auto;
}

/* 
 * Block
 */
@mixin inline-block () {
    display: inline-block;
    *zoom: 1; /* Fix for IE7 */
    *display: inline; /* Fix for IE7 */
}

/* 
 * Miscellaneous
 */
@mixin hide () {
    display: none;
}

@mixin hide-text () {
    font: 0/0 a;
    border: 0;
    color: transparent;
    background-color: transparent;
    text-shadow: none;
	
    @include box-shadow(none);  
}

@mixin n-items ($n) {
	&:first-child:nth-last-child(#{$n}),
	&:first-child:nth-last-child(#{$n}) ~ & {
		@content;
	}
}

// @include linx(white, blue, green, red);
@mixin linx ($link, $visit, $hover, $active) {
  a {
    color: $link;
    &:visited {
      color: $visit;
    }
    &:hover {
      color: $hover;   
    }
    &:active {
      color: $active;
    }
  }
}

// @include pad(20px);
// @include pad(10px 20px);
// @include pad(10px 20px 40px);
// @include pad(10px 20px 30px 20px);
@mixin pad ($pads...) {
  padding: $pads;
}

// add labels in the top left corner of code snippets
// @include label("CSS", $blue, white);
@mixin label ($text: "Code", $background: $yellow, $color: rgba(black, 0.5)) {
  position: relative;
  &:before {
    background: $background;
    color: $color;
    content: $text;
    display: inline-block;
    font-size: 0.6rem;
    font-weight: 700;
    height: 1rem;
    left: 0;
    letter-spacing: 0.1em;
    line-height: 1rem;
    padding: 0 0.5em;
    position: absolute;
    text-transform: uppercase;
    top: 0;
  }
}

/*
 * Coloring
 */
@mixin lightswitch($colour) {
  color: $colour;
  @if(lightness($colour) > 40%) {
    background-color: #000;
    @include box-shadow(0 3px 4px #ddd);
  }
  @if(lightness($colour) <= 40%) {
    background-color: #fff;
    @include box-shadow(0 1px 1px rgba(#000,0.3));
  }
}

/* 
 * Reset filers for IE
 */
@mixin reset-filter () {
    //filter: e(%("progid:DXImageTransform.Microsoft.gradient(enabled = false)"));
}

@mixin rebase($rebase03,
			  $rebase02,
			  $rebase01,
			  $rebase00,
			  $rebase0,
			  $rebase1,
			  $rebase2,
			  $rebase3) {
    * { color:$rebase0; }
    body { background-color:$rebase03; }
    h1,h2,h3,h4,h5,h6 { color:$rebase1; border-color: $rebase0; }
    h1#pagetitle, h1:first-of-type { color: $rebase1; }
    h2#pagesubtitle, h2:first-of-type { color: $rebase01; }
    a, a:active, a:visited { color: $rebase1; }
    a:hover { background-color: $rebase02 }
    header {
        background-color: $rebase01;
        color: $rebase1;
        a.navlink, a:active.navlink, a:visited.navlink { color: $rebase1; }
        a:hover.navlink { background: transparent; color: $rebase02; }
        #sitelink { color: $rebase02; background-color: $rebase1 }
        a:hover#sitelink { font-weight: bold; }
    }
    footer {
        background-color: $rebase02;
        color: $rebase01;
    }
    pre {
        color: $rebase1;
        background-color: $rebase02;
    }
    tr:nth-child(odd) { background-color:$rebase02 }
    th { color:$rebase1; background-color:$rebase03; }
    h1 a:hover {
        -webkit-text-stroke: 3px $rebase02;
    }
    h2#download + h3 {
        background-image: url("/img/download-base00.png");
        color:$rebase0;
    }
}

@mixin accentize($accent) {
    a#sitelink{ background-color:$accent; }
    a, a:active, a:visited, code.url { color: $accent; }
    h1 {color:$accent}
    h2,h3,h4,h5,h6 {color:$accent}
    h1#pagetitle, h1:first-of-type { color: $accent; }
}

// shapes
// @include square(20px, rgb(0,0,255));
@mixin square($size, $color) {
  width: $size;
  height: $size;
  background-color: $color;
}

// text selection
@mixin selection($color) {
	::selection { background: $color; }
	::-moz-selection { background: $color; }
	::-webkit-selection { background: $color; }
}

// background image
@mixin background-image($image) {
	background: url($image) no-repeat center center fixed; 
    -webkit-background-size: cover;
    -moz-background-size: cover;
    -o-background-size: cover;
    background-size: cover;
}

// background size
@mixin background-size($sizeX: 100%, $sizeY: 100%) {
    -webkit-background-size: $sizeX, $sizeY;
	-khtml-background-size: $sizeX, $sizeY;
    -moz-background-size: $sizeX, $sizeY;
	-ms-background-size: $sizeX, $sizeY;
    -o-background-size: $sizeX, $sizeY;
    background-size: $sizeX, $sizeY;
}

// min-height
@mixin min-height($height) {
   min-height: $height;
   height:auto !important;
   height: $height;
}

//@mixin pre() {
//   white-space: pre-wrap;       /* css-3 */
//   white-space: -moz-pre-wrap;  /* Mozilla, since 1999 */
//   white-space: -pre-wrap;      /* Opera 4-6 */
//   white-space: -o-pre-wrap;    /* Opera 7 */
//   word-wrap: break-word;       /* Internet Explorer 5.5+ */
//}

// selection
@mixin selection($select: none) {
    -webkit-touch-callout: $select;
    -webkit-user-select: $select;
    -khtml-user-select: $select;
    -moz-user-select: $select;
    -ms-user-select: $select;
    user-select: $select;
}

@mixin box() {
	display: -webkit-box;
	display: -khtml-box;
	display: -moz-box;
	display: -ms-box;
	display: -o-box;
	display: box;
}

@mixin bbox() {
	-webkit-box-sizing: border-box;
	 -khtml-box-sizing: border-box;
	   -moz-box-sizing: border-box;
	    -ms-box-sizing: border-box;
		 -o-box-sizing: border-box;
	        box-sizing: border-box;
}

@mixin cbox() {
	-webkit-box-sizing: content-box;
	 -khtml-box-sizing: content-box;
	   -moz-box-sizing: content-box;
	    -ms-box-sizing: content-box;
		 -o-box-sizing: content-box;
	        box-sizing: content-box;
}

@mixin ellipsis() {
	white-space: nowrap;
	overflow: hidden;
	-webkit-text-overflow: ellipsis;
	 -khtml-text-overflow: ellipsis;
	   -moz-text-overflow: ellipsis;
	    -ms-text-overflow: ellipsis;
		 -o-text-overflow: ellipsis;
			text-overflow: ellipsis;
}

// @include shape(circle, 50px, $gold);
@mixin placeholder($color: none) {
	&::-webkit-input-placeholder { /* WebKit browsers */
		color: color
	}
	&::-khtml-input-placeholder { /* Khtml browsers */
		color: color
	}
	&:-moz-placeholder { /* Mozilla Firefox 4 to 18 */
	    color: color
	}
	&::-moz-placeholder { /* Mozilla Firefox 19+ */
	    color: color
	}
	&:-ms-input-placeholder { /* Internet Explorer 10+ */
	    color: color
	}
	&::-o-input-placeholder { /* Opera */
	    color: color
	}
}

@mixin shape($shape, $size, $color){
  @if $shape == square {
    width: $size;
    height: $size;
    background-color: $color;
  }
  @if $shape == circle {
    width: $size;
    height: $size;
    background-color: $color;
    border-radius: 50%;
  }
  @if $shape == triangle {
    width: 0;
    height: 0;
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-bottom: $size*1.5 solid $color;
  }
  @if $shape == right-triangle {
    width: 0;
    height: 0;
    border-bottom: $size solid $color;
    border-right: $size solid transparent;
  }
  @if $shape == diamond {
    width: 0;
    height: 0;
    border: $size solid transparent;
    border-bottom-color: $color;
    position: relative;
    top: -$size;
  
    &:after {
      content: '';
      position: absolute;
      left: -$size;
      top: $size;
      width: 0;
      height: 0;
      border: $size solid transparent;
      border-top-color: $color;
    }
  }
  @if $shape == pentagon {
    position: relative;
    width: $size;
    border-width: (25/27)*$size (1/3)*$size 0;
    border-style: solid;
    border-color: $color transparent;
    
    &:before {
      content: "";
      position: absolute;
      height: 0;
      width: 0;
      top: (-17/11)*$size;
      left: (-1/3)*$size;
      border-width: 0 (5/6)*$size (35/54)*$size;
      border-style: solid;
      border-color: transparent transparent $color;
    }
  }
  @if $shape == hexagon {
    width: $size*2;
    height: $size*1.1;
    background: $color;
    position: relative;
    &:before {
      content: "";
      position: absolute;
      top: $size/-2;
      left: 0;
      width: 0;
      height: 0;
      border-left: $size solid transparent;
      border-right: $size solid transparent;
      border-bottom: $size/2 solid $color;
    }
    &:after {
      content: "";
      position: absolute;
      bottom: $size/-2;
      left: 0;
      width: 0;
      height: 0;
      border-left: $size solid transparent;
      border-right: $size solid transparent;
      border-top: $size/2 solid $color;
    }
  }
  @if shape == octogon {
    width: $size;
    height: $size;
    background: transparent;
    position: relative;
    text-align: center;
  
    &:before {
      content: "";
      position: absolute;
      top: 0;
      left: 0;
      border-bottom: 29/$size solid $color;
      border-left: 29/$size solid transparent;
      border-right: 29/$size solid transparent;
      width: 42/$size;
      height: 0;
    }
    
    &:after {
      content: "";
      position: absolute;
      bottom: 0;
      left: 0;
      border-top: 29/$size solid $color;
      border-left: 29/$size solid transparent;
      border-right: 29/$size solid transparent;
      width: 42/$size;
      height: 0;
    }
  }
}

// Animation
@mixin keyframes($name) {
	@-khtml-keyframes #{$name} { @content };
	@-ms-keyframes #{$name} { @content };
	@-o-keyframes #{$name} { @content };
	@-moz-keyframes #{$name} { @content };
	@-webkit-keyframes #{$name} { @content }; 
	@keyframes #{$name} { @content };
}

@mixin animation($animation) {
	-khtml-box-sizing: $animation;
	 -ms-box-sizing: $animation;
	-o-animation: $animation;
	-moz-animation: $animation;
	-webkit-animation: $animation;
	animation: $animation;
}

@mixin fill($padding: 0) {
  position: absolute;
  top: $padding;
  bottom: $padding;
  left: $padding;
  right: $padding;
}

@mixin hide-text {
  font: 0/0 a;
  color: transparent;
  text-shadow: none;
  background-color: transparent;
  border: 0;
}

@mixin center($xy:xy) {
  @if $xy == xy {
    left: 50%;
    top: 50%;
    bottom: auto;
    right: auto;
    @include transform(translateX(-50%) translateY(-50%));
  }
  @else if $xy == x {
    left: 50%;
    right: auto;
    @include transform(translateX(-50%));
  }
  @else if $xy == y {
    top: 50%;
    bottom: auto;
    @include transform(translateY(-50%));
  }
}

@mixin font-smoothing {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

@mixin fontSize($size) {
  font-size: $size; //Fallback in px
  font-size: calculateRem($size);
}

@mixin prefix($prop, $val) {
  -khtml-#{$prop}: #{$val};
  -webkit-#{$prop}: #{$val};
  -ms-#{$prop}: #{$val};
  -moz-#{$prop}: #{$val};
  -o-#{$prop}: #{$val};
  #{$prop}: #{$val};
}

// ------------------------------------------

@mixin triangle ($size, $color, $direction) {
  height: 0;
  width: 0;

  $width: nth($size, 1);
  $height: nth($size, length($size));

  $foreground-color: nth($color, 1);
  $background-color: transparent !default;
  @if (length($color) == 2) {
    $background-color: nth($color, 2);
  }

  @if ($direction == up) or ($direction == down) or ($direction == right) or ($direction == left) {

    $width: $width / 2;

    @if $direction == up {
      border-left: $width solid $background-color;
      border-right: $width solid $background-color;
      border-bottom: $height solid $foreground-color;

    } @else if $direction == right {
      border-top: $width solid $background-color;
      border-bottom: $width solid $background-color;
      border-left: $height solid $foreground-color;

    } @else if $direction == down {
      border-left: $width solid $background-color;
      border-right: $width solid $background-color;
      border-top: $height solid $foreground-color;

    } @else if $direction == left {
      border-top: $width solid $background-color;
      border-bottom: $width solid $background-color;
      border-right: $height solid $foreground-color;
    }
  }

  @else if ($direction == up-right) or ($direction == up-left) {
    border-top: $height solid $foreground-color;

    @if $direction == up-right {
      border-left:  $width solid $background-color;

    } @else if $direction == up-left {
      border-right: $width solid $background-color;
    }
  }

  @else if ($direction == down-right) or ($direction == down-left) {
    border-bottom: $height solid $foreground-color;

    @if $direction == down-right {
      border-left:  $width solid $background-color;

    } @else if $direction == down-left {
      border-right: $width solid $background-color;
    }
  }

  @else if ($direction == inset-up) {
    border-width: $height $width;
    border-style: solid;
    border-color: $background-color $background-color $foreground-color;
  }

  @else if ($direction == inset-down) {
    border-width: $height $width;
    border-style: solid;
    border-color: $foreground-color $background-color $background-color;
  }

  @else if ($direction == inset-right) {
    border-width: $width $height;
    border-style: solid;
    border-color: $background-color $background-color $background-color $foreground-color;
  }

  @else if ($direction == inset-left) {
    border-width: $width $height;
    border-style: solid;
    border-color: $background-color $foreground-color $background-color $background-color;
  }
}

@mixin font-size($size) {
    font-size: $size;
    font-size: calculateRem($size);
    line-height: calculateRem($size) * 1.5;
}

@mixin placeholder {
  ::-webkit-input-placeholder {@content}
  :-moz-placeholder           {@content}
  ::-moz-placeholder          {@content}
  :-ms-input-placeholder      {@content}  
}

@mixin transition2($transition-property, $transition-time, $method) {
    -webkit-transition: $transition-property $transition-time $method;
    -moz-transition: $transition-property $transition-time $method;
    -ms-transition: $transition-property $transition-time $method;
    -o-transition: $transition-property $transition-time $method;
    transition: $transition-property $transition-time $method;
}

// @include ani($hero-ani-name, ease-in-out, normal, $hero-ani-time, forwards);
@mixin ani($name, $timing, $direction, $duration, $fill){
  animation-name: $name;
  animation-timing-function: $timing;
  animation-direction: $direction;
  animation-duration: $duration;
  animation-fill-mode: $fill;
}

@mixin clip-frame($width, $height, $border) {
  -webkit-clip-path: polygon(0% 100%, $border 100%, $border $border, $width - $border $border, $width - $border $height - $border, $border $height - $border, $border 100%, 100% 100%, 100% 0%, 0% 0%);
  -moz-clip-path: polygon(0% 100%, $border 100%, $border $border, $width - $border $border, $width - $border $height - $border, $border $height - $border, $border 100%, 100% 100%, 100% 0%, 0% 0%);
  -ms-clip-path: polygon(0% 100%, $border 100%, $border $border, $width - $border $border, $width - $border $height - $border, $border $height - $border, $border 100%, 100% 100%, 100% 0%, 0% 0%);
  -o-clip-path: polygon(0% 100%, $border 100%, $border $border, $width - $border $border, $width - $border $height - $border, $border $height - $border, $border 100%, 100% 100%, 100% 0%, 0% 0%);
  clip-path: polygon(0% 100%, $border 100%, $border $border, $width - $border $border, $width - $border $height - $border, $border $height - $border, $border 100%, 100% 100%, 100% 0%, 0% 0%);
}

@mixin truncateText() {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}
@mixin standardTransition($standardDuration) {
      -webkit-transition: all $standardDuration cubic-bezier(0.915, 0.010, 0.075, 0.995);
         -moz-transition: all $standardDuration cubic-bezier(0.915, 0.010, 0.075, 0.995);
           -o-transition: all $standardDuration cubic-bezier(0.915, 0.010, 0.075, 0.995);
              transition: all $standardDuration cubic-bezier(0.915, 0.010, 0.075, 0.995);
}

@mixin thumb() {
  appearance: none;
  width: $thumb-width;
  height: $thumb-height;
  border: none;
  background: transparent $thumb-image;
}