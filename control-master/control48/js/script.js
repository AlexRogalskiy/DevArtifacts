// Generated by CoffeeScript 1.12.7
(function() {
  (function($) {
    var methods, settings;
    $.fn.floatLabels = function(method) {
      if (methods[method]) {
        return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
      } else if ($.isPlainObject(method) || !methods[method]) {
        return methods.make.apply(this, arguments);
      } else {
        return $.error("Method " + method + " does not exist on jQuery.floatLabels");
      }
    };
    settings = {};
    return methods = {
      make: function(options) {
        var defaults, getLabel, hasVal;
        defaults = {
          floatOn: "entry",
          activeClass: "float-label-active",
          filledClass: "float-label-filled",
          inputClass: "float-label-input"
        };
        settings = $.extend({}, defaults, options || {});
        hasVal = function(el) {
          return el.value.length !== 0;
        };
        getLabel = function(el) {
          if (el.id) {
            return $("[for='" + el.id + "']");
          } else {
            return $("[for='" + el.name + "']");
          }
        };
        this.addClass(settings.inputClass);
        return this.each(function(i, input) {
          var $input, $label;
          $input = $(input);
          $label = getLabel(input);
          switch (settings.floatOn) {
            case "focus":
              $input.bind("focus.floatLabel", function() {
                return $label.addClass(settings.activeClass);
              }).bind("blur.floatLabel", function() {
                $label.removeClass(settings.activeClass);
                if (hasVal(this)) {
                  return $label.addClass(settings.filledClass);
                } else {
                  return $label.removeClass(settings.filledClass);
                }
              }).trigger("blur.floatLabel");
              break;
            case "entry":
              $input.bind("focus.floatLabel", function() {
                if (hasVal(this)) {
                  return $label.addClass(settings.activeClass);
                }
              }).bind("blur.floatLabel", function() {
                if (hasVal(this)) {
                  return $label.addClass(settings.filledClass).removeClass(settings.activeClass);
                }
              }).bind("keyup.floatLabel", function() {
                if (hasVal(this)) {
                  return $label.addClass(settings.activeClass);
                } else {
                  return $label.removeClass(settings.activeClass + " " + settings.filledClass);
                }
              }).trigger("blur.floatLabel");
              break;
            default:
              console.warn("Invalid floatOn option: " + settings.floatOn);
          }
          return this;
        });
      },
      destroy: function() {
        if (settings.inputClass) {
          this.removeClass(settings.inputClass);
        }
        this.each(function(i, input) {
          var $input, $label;
          $input = $(input);
          $label = getLabel(input);
          $label.removeClass(settings.activeClass + " " + settings.filledClass);
          return $input.unbind("focus.floatLabel").unbind("blur.floatLabel").unbind("keydown.floatLabel");
        });
        return this;
      }
    };
  })(jQuery);

  $(".float-label-input-focus").floatLabels({
    floatOn: "focus"
  });

  $(".float-label-input-entry").floatLabels();

  $(".float-label-inner, .float-label-outer").each(function(i) {
    console.log("each " + i);
    return $(this).attr("style", "-webkit-animation-delay : " + (-i * .5) + "s");
  });

}).call(this);
