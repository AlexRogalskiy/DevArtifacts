// Generated by CoffeeScript 1.12.7
(function() {
  var App,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  App = (function() {
    App.prototype.spawning = true;

    App.prototype.particles = [];

    App.prototype.lastX = window.innerWidth / 2;

    App.prototype.lastY = window.innerHeight / 2;

    App.prototype.scale = 1;

    function App() {
      this.loop = bind(this.loop, this);
      this.onUp = bind(this.onUp, this);
      this.onDown = bind(this.onDown, this);
      this.onTouchMove = bind(this.onTouchMove, this);
      this.onMouseMove = bind(this.onMouseMove, this);
      this.onResize = bind(this.onResize, this);
      this.isTouch = bind(this.isTouch, this);
      this.build();
      this.addListeners();
      this.loop();
      this.tuttimer = setTimeout((function(_this) {
        return function() {
          return _this.spawning = false;
        };
      })(this), 3000);
    }

    App.prototype.build = function() {
      this.canvas = document.createElement("canvas");
      document.body.appendChild(this.canvas);
      this.c = this.canvas.getContext("2d");
      this.x = window.innerWidth / 2;
      return this.y = window.innerHeight / 2;
    };

    App.prototype.addListeners = function() {
      window.addEventListener("mousemove", this.onMouseMove);
      window.addEventListener("touchmove", this.onTouchMove);
      window.addEventListener("mousedown", this.onDown);
      window.addEventListener("touchstart", this.onDown);
      window.addEventListener("touchstart", this.isTouch);
      window.addEventListener("mouseup", this.onUp);
      window.addEventListener("touchend", this.onUp);
      window.addEventListener("resize", this.onResize);
      return this.onResize();
    };

    App.prototype.isTouch = function() {
      this.canvas.setAttribute("class", "is-touch");
      this.scale = 2;
      return this.onResize();
    };

    App.prototype.onResize = function() {
      var height, width;
      width = window.innerWidth * this.scale;
      height = window.innerHeight * this.scale;
      if (this.width !== width || this.height !== height) {
        this.width = width;
        this.height = height;
        this.canvas.setAttribute("width", this.width);
        return this.canvas.setAttribute("height", this.height);
      }
    };

    App.prototype.onMouseMove = function(e) {
      this.lastX = this.x;
      this.lastY = this.y;
      this.x = e.clientX;
      return this.y = e.clientY;
    };

    App.prototype.onTouchMove = function(e) {
      this.lastX = this.x;
      this.lastY = this.y;
      this.x = e.touches[0].clientX * this.scale;
      return this.y = e.touches[0].clientY * this.scale;
    };

    App.prototype.onDown = function(e) {
      e.preventDefault();
      clearTimeout(this.tuttimer);
      return this.spawning = true;
    };

    App.prototype.onUp = function() {
      return this.spawning = false;
    };

    App.prototype.loop = function() {
      requestAnimationFrame(this.loop);
      this.make();
      this.update();
      return this.draw();
    };

    App.prototype.make = function() {
      var angle, color, d, v, xv, yv;
      if (this.spawning && this.particles.length < 250) {
        angle = Math.random() * 360;
        d = angle * (Math.PI / 180);
        v = 3 + Math.random() * 10;
        xv = Math.sin(d) * v + ((this.x - this.lastX) * 1);
        yv = Math.cos(d) * v + ((this.y - this.lastY) * 1);
        color = Math.atan2(this.y - (this.y + yv), this.x - (this.x + xv)) * 180 / Math.PI;
        return this.particles.push({
          color: color,
          life: 1500 + Math.random() * 7000,
          position: {
            x: this.x,
            y: this.y,
            s: 0
          },
          velocity: {
            x: xv,
            y: yv,
            s: 0
          }
        });
      }
    };

    App.prototype.update = function() {
      var i, j, k, len, len1, particle, ref, results, vertex, vertices;
      ref = this.particles;
      for (j = 0, len = ref.length; j < len; j++) {
        particle = ref[j];
        vertices = ["x", "y", "s"];
        for (k = 0, len1 = vertices.length; k < len1; k++) {
          vertex = vertices[k];
          particle.position[vertex] += particle.velocity[vertex];
        }
        particle.velocity.x *= 0.977;
        particle.velocity.y *= 0.977;
        particle.velocity.s = particle.position.s - (particle.life / 250);
        particle.position.s += particle.velocity.s;
        particle.life *= 0.995;
        particle.life -= 1000 / 60;
      }
      i = this.particles.length - 1;
      results = [];
      while (i >= 0) {
        particle = this.particles[i];
        if (particle.life <= 0) {
          this.particles.splice(i, 1);
        }
        results.push(i--);
      }
      return results;
    };

    App.prototype.draw = function() {
      var j, len, particle, r, ref, results, x, y;
      ref = this.particles;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        particle = ref[j];
        x = particle.position.x;
        y = particle.position.y;
        r = particle.life / 150;
        this.c.fillStyle = "hsl( " + (Math.round(particle.color)) + " , 45% , 80% )";
        this.c.beginPath();
        this.c.arc(x, y, r, 0, 2 * Math.PI);
        this.c.fill();
        results.push(this.c.closePath());
      }
      return results;
    };

    return App;

  })();

  new App();

}).call(this);
