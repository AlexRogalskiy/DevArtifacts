// Generated by CoffeeScript 1.12.7
(function() {
  var Canvas, bottom, canvas, i, top,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;

  Canvas = (function() {
    function Canvas() {
      this.goToBottom = bind(this.goToBottom, this);
      this.goToTop = bind(this.goToTop, this);
      this.createDay = bind(this.createDay, this);
      var i, j, label;
      this.days = {};
      this.duration = 1;
      this.renderer = new THREE.WebGLRenderer({
        antialias: true,
        alpha: true
      });
      this.renderer.setSize(window.innerWidth, window.innerHeight);
      document.body.appendChild(this.renderer.domElement);
      this.scene = new THREE.Scene();
      this.addCamera();
      this.addLight();
      this.createFirstLabel();
      for (i = j = 25; j >= 1; i = --j) {
        label = i < 10 ? "0" + i : i;
        this.createDay(label);
      }
    }

    Canvas.prototype.addCamera = function() {
      var controls;
      this.camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 1, 1000);
      this.camera.position.set(0, 0, 500);
      this.scene.add(this.camera);
      controls = new THREE.OrbitControls(this.camera);
      return controls.addEventListener('change', (function(_this) {
        return function() {
          return _this.renderer.render(_this.scene, _this.camera);
        };
      })(this));
    };

    Canvas.prototype.addLight = function() {
      var ambientLight, pointLight;
      ambientLight = new THREE.AmbientLight(0xCACACA);
      pointLight = new THREE.PointLight(0xFFFFFF, 0.3);
      ambientLight.position.set(0, 0, 500);
      pointLight.position.set(0, 200, 500);
      this.scene.add(ambientLight);
      return this.scene.add(pointLight);
    };

    Canvas.prototype.createFirstLabel = function() {
      var geometry, material, materials, mesh;
      materials = [
        new THREE.MeshLambertMaterial({
          map: this.makeCanvasTexture()
        }), new THREE.MeshLambertMaterial({
          map: this.makeCanvasTexture()
        }), new THREE.MeshLambertMaterial({
          map: this.makeCanvasTexture()
        }), new THREE.MeshLambertMaterial({
          map: this.makeCanvasTexture()
        }), new THREE.MeshLambertMaterial({
          map: this.makeCanvasTexture()
        }), new THREE.MeshLambertMaterial({
          map: this.makeCanvasTexture('December')
        })
      ];
      geometry = new THREE.CubeGeometry(200, 100, 1);
      geometry.applyMatrix(new THREE.Matrix4().makeTranslation(0, -50, 0));
      material = new THREE.MeshFaceMaterial(materials);
      mesh = new THREE.Mesh(geometry, material);
      mesh.rotation.x = -Math.PI;
      this.scene.add(mesh);
      return this.renderer.render(this.scene, this.camera);
    };

    Canvas.prototype.createDay = function(label) {
      var geometry, material, materials;
      materials = [
        new THREE.MeshLambertMaterial({
          map: this.makeCanvasTexture()
        }), new THREE.MeshLambertMaterial({
          map: this.makeCanvasTexture()
        }), new THREE.MeshLambertMaterial({
          map: this.makeCanvasTexture()
        }), new THREE.MeshLambertMaterial({
          map: this.makeCanvasTexture()
        }), new THREE.MeshLambertMaterial({
          map: this.makeCanvasTexture(label)
        }), new THREE.MeshLambertMaterial({
          map: this.makeCanvasTexture('December')
        })
      ];
      geometry = new THREE.CubeGeometry(200, 100, 1);
      geometry.applyMatrix(new THREE.Matrix4().makeTranslation(0, -50, 0));
      material = new THREE.MeshFaceMaterial(materials);
      this.days[label] = new THREE.Mesh(geometry, material);
      this.scene.add(this.days[label]);
      return this.renderer.render(this.scene, this.camera);
    };

    Canvas.prototype.goToTop = function(key) {
      return TweenMax.to(this.days[key].rotation, this.duration, {
        x: -Math.PI,
        ease: Quart.easeOut,
        onUpdate: (function(_this) {
          return function() {
            return _this.renderer.render(_this.scene, _this.camera);
          };
        })(this)
      });
    };

    Canvas.prototype.goToBottom = function(key) {
      return TweenMax.to(this.days[key].rotation, this.duration, {
        x: 0,
        ease: Quart.easeOut,
        onUpdate: (function(_this) {
          return function() {
            return _this.renderer.render(_this.scene, _this.camera);
          };
        })(this)
      });
    };

    Canvas.prototype.makeCanvasTexture = function(text) {
      var canvas, context, texture;
      canvas = document.createElement('canvas');
      context = canvas.getContext('2d');
      canvas.width = 400;
      canvas.height = 200;
      context.fillStyle = "#FFF";
      context.fillRect(0, 0, 400, 200);
      context.translate(canvas.width / 2, canvas.height / 2);
      if (text) {
        context.save();
        if (text === 'December') {
          context.fillStyle = "red";
          context.textAlign = 'center';
          context.font = "65px Helvetica";
          context.scale(-1, -1);
          context.fillText(text, 0, 25);
        } else {
          context.fillStyle = "red";
          context.textAlign = 'center';
          context.font = "140px Helvetica";
          context.fillText(text, 0, 20);
        }
        context.restore();
      }
      texture = new THREE.Texture(canvas);
      texture.minFilter = THREE.LinearFilter;
      texture.needsUpdate = true;
      return texture;
    };

    return Canvas;

  })();

  canvas = new Canvas;

  top = document.getElementById('top');

  bottom = document.getElementById('bottom');

  i = 1;

  top.addEventListener('click', function() {
    var label;
    i = i > 24 ? i = 24 : i;
    i = i < 1 ? i = 1 : i;
    label = i < 10 ? "0" + i : i;
    canvas.goToTop(label);
    return i++;
  });

  bottom.addEventListener('click', function() {
    var label;
    i = i < 1 ? i = 1 : i;
    i = i > 24 ? i = 24 : i;
    label = i < 10 ? "0" + i : i;
    canvas.goToBottom(label);
    return i--;
  });

}).call(this);
