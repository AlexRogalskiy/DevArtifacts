@import "compass/css3";

/**
 *
 * Absolute position in the center of the parent element (top, left). 
 *
 */
%helper-alpha {
  position: absolute;
  left: 50%;
  top: 50%;
}





/**
 *
 * Absolute position in the center of the parent element (-50%, -50%). 
 *
 */
%center {
  @extend %helper-alpha;
  @include transform (translate(-50%, -50%));
}




/**
 *
 * Absolute position at $top and $left. 
 * You can also add value for the $content property. 
 *
 */
@mixin position($top, $left, $content: '') {
  position: absolute;
  top: $top;
  left: $left;
  content: $content;
}
  
  
  

/**
 *
 * Include a breakpoint for different screen sizses:
 *
 * small : smart phones & smaller devices
 * medium :  tablets, netbooks
 * large : HD, large screens, beamer
 *
 */
@mixin breakpoint($point) {
  @if $point == large {
    @media (min-width: 85em) { @content; }
  }
  @if $point == medium {
    @media (max-width: 85em) { @content; }
  }
  @if $point == small {
    @media (max-width: 60em) { @content; } 
  }
}




/**
 *
 * Linear gradient with old and new syntax. 
 * bg(to bottom, top, #f00, #00f)
 *
 */
@mixin bg($direction, $direction_old, $colors) {
  @include background(
    linear-gradient($direction_old, $colors)
  );
  @include background(
    linear-gradient($direction, $colors)
  );
}




/**
 *
 * Animation 
 *
 */
@mixin animation($value) {
  -webkit-animation: unquote($value);
     -moz-animation: unquote($value);
       -o-animation: unquote($value);
          animation: unquote($value);
}




/**
 *
 * Keyframes
 *
 */
@mixin keyframes($name) {
  @-webkit-keyframes #{$name} { @content; }
     @-moz-keyframes #{$name} { @content; }
       @-o-keyframes #{$name} { @content; }
          @keyframes #{$name} { @content; }
}





/**
 *
 * Placeholder
 *
 */
@mixin placeholder() {
  &::-webkit-input-placeholder { @content; }
  &::-moz-placeholder { @content; } 
  &::-ms-input-placeholder { @content; }
  &::-moz-placeholder { @content; }
  &::placeholder { @content; }
}






@function reverse-lightness($color) {
  
  // Default: has no effect
  $result: 0;
  
  // Get the lightness value in % from $color
  $value: lightness($color);
  
  // If the $color is light
  @if $value >= 50 {
    // We return a darker version of $color
    $result: scale-color($color, $lightness: -$value);
    
  // If the $color is dark
  } @else {
    // We return a lighter version of $color
    $result: scale-color($color, $lightness: 100% - $value);
  } 
  
  @return $result;
}





// deprecated
%bottom-2 {
  @extend %helper-alpha;
}
