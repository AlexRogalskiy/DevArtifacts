@import "compass"
@import "breakpoint"
@import "susy"

$phone: 480px
$mobile: 640px
$tablet: 800px
$desktop: 960px
$laptop: 1260px
$screen: 1600px
$widescreen: 2000px

$base-unit: 16

@function rem($pixels, $context: $base-unit)
  @return #{ strip-unit($pixels) / $context }rem

@function em($pixels, $context: $base-unit)
  @return #{ strip-unit($pixels) / $context }em

@function strip-unit($number)
  @if type-of($number) == "number" and not unitless($number)
    @return $number / ($number * 0 + 1)
  @else
    @return $number

@function gunit($i:1)
  @return $base-unit * $i

$prefixes: ("-webkit-","-moz-", "-o-", "")

=selection($color, $background)
  @each $prefix in $prefixes 
    ::#{$prefix}selection 
      color: $color
      background: $background

=clear-list
  margin: 0
  padding: 0
  list-style-type: none

=placeholder
  &.placeholder
    @content
  &:-moz-placeholder
    @content
  &::-webkit-input-placeholder
    @content

// ----
// Sass (v3.3.7)
// Compass (v1.0.0.alpha.18)
// ----

// Helper mixin for offset positioning
// About: http://hugogiraudel.com/2013/08/05/offsets-sass-mixin/
// ---
// Here is an improved version adding some extra features
// ---
// @param [string] $position: position
// @param [list] $args (()): offsets list
// ---
// Explanations
// 1. Output position
// 2. If `$args` is not empty
// 3. Loop other the 4 popular offsets (`$offsets`)
// 4. Check if the current one exists in `$args`
// 5. If it is found in `$args`
// 6. And if it is at last position
// 7. Set it to 0
// 8. Else if it is found at any other index
// 9. Store the next value from `$args`
// 10. If it is a valid length
// 11. Set the offset to this value
// 12. Else if it is another offset
// 13. Set the offset to 0
// 14. Else
// 15. Warn the user
// ---

=position($position, $args: ())
  $offsets: top right bottom left
  position: $position
  // 1
  @each $offset in $offsets
    // 3
    $index: index($args, $offset)
    // 4
    @if $index
      // 5
      @if $index == length($args)
        // 6
        #{$offset}: 0
        // 7
      @else
        // 8
        $next: nth($args, $index + 1)
        // 9
        @if is-valid-length($next)
          // 10
          #{$offset}: $next
          // 11
        @else if index($offsets, $next)
          // 12
          #{$offset}: 0
          // 13
        @else
          // 14
          @warn "Invalid value `#{$next}` for offset `#{$offset}`."
          // 15

// Function checking if $value is a valid length
// ---
// @param [literal] $value: value to test
// ---
// @return [bool]

@function is-valid-length($value)
  @return type-of($value) == "number" and not unitless($value) or index(auto initial inherit 0, $value) != null

// Shorthands
// ---

=absolute($args: ())
  +position(absolute, $args)

=fixed($args: ())
  +position(fixed, $args)

=relative($args: ())
  +position(relative, $args)

// Examples
// ---

// .a
//   +absolute

// .b
//   +absolute(top)

// .c
//   +absolute(top right)

// .d
//   +absolute(top right bottom)

// .e
//   +absolute(top right bottom left)

// .f
//   +absolute(top right 1em)

// .g
//   +absolute(top 1em right)

// .h
//   +absolute(top 1em right 100%)

// .i
//   +absolute(top right mistake)

// .j
//   +absolute(top 1em right 1em bottom 1em left 1em)


=clip-path($clip)
  shape-inside: $clip
  -webkit-clip-path: $clip
  -moz-clip-path: $clip
  -ms-clip-path: $clip

=com($text)
  /* 
    #############

    #{$text}

    #############
=clearfix
  &:after
    content: ''
    display: block
    clear: both

=first-last-clear
  > *
    &:first-child
      margin-top: 0
    &:last-child
      margin-bottom: 0

=first-last-cut
  > *
    &:first-child
      margin-top: -.25em
    &:last-child
      margin-bottom: -.25em

=container
  padding:
    left: 52px
    right: 52px

// Text: Regular Size 16/20, Letter spacing 20/1000 em
// Text mobile: Regular Size 13/16, Letter spacing 20/1000 



// Large headlines: Medium 36/36 (plus 24/24 on mobile)
=font-huge // titles
  font-size: rem(24)
  line-height: 1
  font-weight: bold
  letter-spacing: normal
  +breakpoint($mobile)
    font-size: rem(36)

// Titles: Regular Size 10/12, Letter spacing 50/1000 em
=font-tiny // headlines
  font-size: rem(10)
  line-height: (12/10)
  letter-spacing: #{(5/100)}em
  text-transform: uppercase
  font-weight: normal







=icon($direction)
  position: relative
  &:after
    content: ''
    +absolute(top 50%)
    width: 32px
    height: 19px
    margin-top: -10px // this should be 9.5
    // transform: translate(0, -50%)
    background: url("../images/ui/#{$direction}.svg") no-repeat left center
    // background-color: red

    @if $direction == 'next'
      left: 100%
      background-position: right center
    @else
      right: 100%


=icon-block
  display: block
  min-height: 19px

    

=underline
  position: relative
  &:after
    content: ''
    border-top: 1px solid #c7c7c7
    +absolute(top 100% left right)

  &:hover:after
    border-color: #ababab