# Kismet can be tuned to run on systems with less ram by disabling some 
# built in functionality and reducing the amount of information tracked
# in each device.

# Adding devices to the device list can be time consuming; by 
# preconfiguring the device list to hold a larger number of devices
# Kismet performance can be sped up; this uses slightly more memory.
tracker_device_presize=1000

# For long-running instances of Kismet in a WIDS style usage, it may be 
# useful to limit the amount of memory kismet will consume, with the
# following tuning values:
 
# Time, in seconds, for devices to be tracked when idle.  By default, devices
# are kept forever, however in RAM constrained environments it may be preferable
# to stop tracking older devices.
# Devices which are removed will be detected as new devices without historical
# data if they are detected a second time.
# Example timeout of 2 hours (60*60*2)
#
# tracker_device_timeout=7200

# Maximum number of packets a device can have and be considered eligible for
# removal; if a device has been idle for the tracker_device_timeout value, and
# contains FEWER than the tracker_device_packets number of packets, it will be
# removed.
# This can be used to tune the removal process to select devices which are most
# likely artifacts of driver errors or otherwise spoofed packets.
#
# tracker_device_packets=20

# Maximum number of devices allowed in the tracker.  If this is reached, older
# devices will be purged, and if they are detected again, will show up as new 
# devices without historical data.
#
# tracker_max_devices=10000

# Kismet tracks packet rate history in a RRD (round-robin-database) style 
# structure; this allows the UI to show behavior over time, but uses more
# RAM.
track_device_rrds=true


# Kismet tracks location of devices as both a running average and a 
# "cloud" of location data which can be used by webui plugins to render more
# location information.
keep_location_cloud_history=true

# Kismet keeps a per-datasource signal history of devices which aids in 
# tracking and display
keep_datasource_signal_history=true

# How many alerts are kept in the alert history
alertbacklog=50

# How many packet checksums are kept for de-duplication efforts
packet_dedup_size=2048

# How many backlogged packets before we alert that the backlog is filling up; a 
# packet likely contains about 1.5k of data at most, so memory tuning can be
# planned accordingly.
#
# Defaults to zero, which will not warn if the packet queue begins to grow.
# Warnings will still be generated if the packet queue hits the hard limit of
# packet_backlog_limit
packet_backlog_warning=0

# How many backlogged packets before Kismet starts dropping packets; this 
# can be set to 0 to allow the packet processing queue to grow unbounded, but 
# this can lead to out-of-control memory consumption; by default Kismet picks a
# high, but limited, number.
packet_backlog_limit=8192

# Kismet can hard-limit the amount of memory it is allowed to use via the 
# 'ulimit' system; this could be set via a launch/setup script using the
# 'ulimit' command, or Kismet can set the maximum amount of ram it can use
# at startup.  
#
# If Kismet runs out of ram, it *will exit immediately* as if the system had
# encountered an out-of-memory error.
#
# This setting should ONLY be combined with a restart script that relaunches
# Kismet, and typically should only be used on long-running IDS-style installs
# of Kismet.
#
# The memory value is specified in *megabytes of ram*
# 
# ulimit_mbytes=16384

