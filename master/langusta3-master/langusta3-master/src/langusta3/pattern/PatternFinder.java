package langusta3.pattern;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import langusta3.core.SpelledWord;

public class PatternFinder {
    Generator generator;
    
    public PatternFinder(Generator g) {
        generator = g;
    }

    /** Return word forms which are generated only once **/
    public List<FormInfoTO> getUniqueWForms(SpelledWord word, String filterTag) {
        Map<String, List<FormInfoTO>> forms = new HashMap<String, List<FormInfoTO>>();
        List<Pattern> patterns = new ArrayList<Pattern>();
        List<FormInfoTO> result = new ArrayList<FormInfoTO>();
        
        List<Pattern> allPatterns = generator.getPossiblePatterns(word);
        /** NULL can be arg to forms.put **/
        for (Pattern p : allPatterns) {
           List<FormInfoTO> allForms = p.getWordForms(p.getBases(word));
           List<FormInfoTO> filteredForms = new ArrayList<FormInfoTO>();
           
           for (FormInfoTO f : allForms) {
               if (!filterTag.isEmpty() && f.getTag().contains(filterTag)) {
                   filteredForms.add(f);
               } else if (filterTag.isEmpty()) {
                   filteredForms.add(f);
               }
           }
           if (!filteredForms.isEmpty()) {
               patterns.add(p);
            forms.put(p.toString(), filteredForms);
           }
        }
        
        for (int i=0; i < patterns.size(); i++) {
            for (FormInfoTO f : forms.get(patterns.get(i).toString())) {
                boolean pass = true;
                
                for (int z=0; z < patterns.size(); z++) {
                    if (z == i) { continue; }
                    
                    for (FormInfoTO d : forms.get(patterns.get(z).toString())) {
                        if (d.getWord().toString().equals(f.getWord().toString()) == true) {
                            pass = false;
                        }
                    }
                }
                
                if ((pass == true) && (f.getWord().toString().length() > 0)) {
                    result.add(f);
                }
            }
        }
        
        return result;
    }

    /** Return those forms which are not generated by all candidate patterns **/
    public List<FormInfoTO> getDiscriminativeWForms(SpelledWord word, String filterTag) {
        Map<String, List<FormInfoTO>> forms = new HashMap<String, List<FormInfoTO>>();
        List<Pattern> patterns = new ArrayList<Pattern>();
        List<FormInfoTO> result = new ArrayList<FormInfoTO>();
        
        List<Pattern> allPatterns = generator.getPossiblePatterns(word);
        for (Pattern p : allPatterns) {
           List<FormInfoTO> allForms = p.getWordForms(p.getBases(word));
           List<FormInfoTO> filteredForms = new ArrayList<FormInfoTO>();

           for (FormInfoTO f : allForms) {
               if (!filterTag.isEmpty() && f.getTag().contains(filterTag)) {
                   filteredForms.add(f);
               } else if (filterTag.isEmpty()) {
                   filteredForms.add(f);
               }
           }
           if (!filteredForms.isEmpty()) {
               patterns.add(p);
            forms.put(p.toString(), filteredForms);
           }                      
        }
        
        for (int i=0; i < patterns.size(); i++) {
            for (FormInfoTO f : forms.get(patterns.get(i).toString())) {
                boolean pass = true;

                boolean skip = false;
                for (FormInfoTO res : result) {
                    if (f.getWord().toString().equals(res.getWord().toString()) == true) {
                        skip = true;
                    }
                }

                if (skip == true) {
                    // this word form is already in results
                    continue;
                }
                
                for (int z=0; z < patterns.size(); z++) {
                    if (z == i) { continue; }

                    boolean passX = false;
                    for (FormInfoTO d : forms.get(patterns.get(z).toString())) {
                        if (d.getWord().toString().equals(f.getWord().toString()) == true) {
                            passX = true;
                        }
                    }
                    if (passX == false) {
                        pass = false;
                    }
                }
                
                if ((pass == false) && (f.getWord().toString().length() > 0)) {
                    f.setPattern(null);
                    result.add(f);
                }
            }
        }
        
        return result;
    }
}
