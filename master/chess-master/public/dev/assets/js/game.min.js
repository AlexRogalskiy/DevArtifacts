!function() {
    "use strict";
    var socket = io.connect("/chess"), msgContent = $(".messages-container");
    msgContent[0].scrollTop = msgContent[0].scrollHeight;
    var addChatMsg = function(data) {
        msgContent.append('<div class="messages-box reply"><a class="user-photo"><img src="' + players[data.player].picture + '" /></a><p class="message">' + data.message.replace(/\n/g, "<br>") + '<span class="message-date">' + data.date + "</span></p></div>"), 
        msgContent[0].scrollTop = msgContent[0].scrollHeight;
    }, addLog = function(type, playerid, date, msg) {
        var player = players[playerid];
        $(".log-container .log-list").prepend("<li><span>[ " + date + ' ]</span> <a href="#">' + player.name.split(" ")[0] + "</a> " + msg + "</li>");
    }, setStatus = function(playerid, state) {
        if (playerid = playerid.toString(), "online" == state) {
            var playerBox = $('.user-box.player[data-player="' + playerid + '"]');
            playerBox.find(".status").removeClass("off"), playerBox.find(".user-status").html("online");
        } else {
            var playerBox = $('.user-box.player[data-player="' + playerid + '"]');
            playerBox.find(".status").addClass("off"), playerBox.find(".user-status").html("offline");
        }
    }, getPiece = function(line, col) {
        return $('.chess-board li[data-position="' + line + col + '"] >span');
    }, previewMoviments = function(li) {
        var piece = li.children("span.piece");
        piece.hasClass("pawn") ? console.log("Preview PAWN") : piece.hasClass("rook") ? console.log("Preview ROOK") : piece.hasClass("bishop") ? console.log("Preview BISHOP") : piece.hasClass("queen") ? console.log("Preview QUEEN") : piece.hasClass("king") ? console.log("Preview KING") : piece.hasClass("horse") && console.log("Preview HORSE");
    };
    window.makeMove = function(from, to) {
        socket.emit("make-move", {
            from: from,
            to: to
        });
    }, socket.emit("join-room", {
        room: roomId,
        user: playerId
    }), socket.on("reload", function() {
        window.location.reload();
    }), socket.on("game-done", function() {
        window.location = "/chess/home";
    }), socket.on("player-joined", function(data) {
        setStatus(data.player._id, "online"), socket.emit("game-info", {}), addLog("joined-room", data.player._id, data.date, "Connected");
    }), socket.on("players-statuses", function(data) {
        for (var key in data) setStatus(key, data[key]);
    }), socket.on("new-chat-msg", function(data) {
        addChatMsg(data), $(".messages-send").val("");
    }), socket.on("exit-room", function(data) {
        setStatus(data.player._id, "offline"), addLog("exit-room", data.player._id, data.date, "Disconnected");
    }), socket.on("do-move", function(data) {
        $(".chess-board li[data-position].active").removeClass("active");
        var $from = getPiece(data.from.line, data.from.col), $to = getPiece(data.to.line, data.to.col), enemyIdx = 1 == data.playerIdx ? 2 : 1, fromParent = $from.parent(), toParent = $to.parent();
        $from.addClass("move"), $from.animate({
            top: $to.offset().top - $from.offset().top,
            left: $to.offset().left - $from.offset().left
        }, 1e3, function() {
            if ($from.appendTo(toParent), $from.css({
                top: 0,
                left: 0
            }), data.extra.winner !== !1) {
                console.log("WINNER: ", "Player " + data.extra.winner), $('.chess-board li[data-position]>span.piece[data-player="' + data.extra.winner + '"]').addClass("win"), 
                $("#modal-win").modal("show");
                var msg, enemy = (players[playerId].name, players[enemyId].name);
                data.extra.winner == playerIdx ? ($("#game-lose").hide(), msg = "Uau! Ganhei um jogo contra " + enemy) : ($("#game-won").hide(), 
                msg = "Droga! Perdi um jogo contra o " + enemy), $("#btn-share").click(function() {
                    FB.ui({
                        method: "feed",
                        name: "CheSS.js",
                        caption: msg,
                        description: "Jogue você também contra seus amigos o CheSS.js",
                        link: "https://chessjs.trendi.com.br"
                    }, function(response) {
                        console.log(response);
                    });
                });
            }
            data.extra.capture && ($to.children("span").removeClass("icon-pawn icon-rook icon-queen icon-king icon-bishop icon-horse"), 
            $to.removeAttr("data-player").removeClass("pawn rook queen king bishop horse")), 
            $to.appendTo(fromParent), $from.removeClass("move"), data.check === !0 ? $('.chess-board li[data-position]:has(>span.piece.king[data-player="' + enemyIdx + '"]) span.king').addClass("check") : $('.chess-board li[data-position]:has(>span.piece.king[data-player="' + enemyIdx + '"]) span.king').removeClass("check");
        });
    }), $(".messages-send").on("keypress", function(ev) {
        var $me = $(this);
        if (13 === ev.which && ev.shiftKey === !1) {
            if (!$me.val().trim()) return;
            socket.emit("chat-msg", {
                message: $me.val().trim()
            });
        }
    });
    var selected = null;
    $(".chess-board").on("click", 'li[data-position]:has(>span[data-player="' + playerIdx + '"])', function() {
        var $me = $(this);
        $me.hasClass("active") ? ($me.removeClass("active"), selected = null) : ($(".chess-board li[data-position].active").removeClass("active"), 
        $me.addClass("active"), selected = $me.data("position"), previewMoviments($me));
    }).on("click", 'li[data-position]:not(:has(>span[data-player="' + playerIdx + '"]))', function() {
        var $me = $(this);
        makeMove(selected, $me.data("position"));
    }), setTimeout(function() {
        $(".chess-board li span.piece.in").removeClass("in");
    }, 2e3);
    {
        var timeContainer = $(".time");
        setInterval(function() {
            timeContainer.find("b").html(moment(timeContainer.data("start"), "YYYYMMDDHHmmss").fromNow());
        }, 3e4);
    }
}();