// import [path removed].*;class shootingGame {    private var theRoad:MovieClip;    private var gameAreaWidth:Number;    private var gameAreaHeight:Number;    private var gameAreaMask:MovieClip;    private var gameTargetClip:MovieClip;    private var userCarClip:MovieClip;    private var enemyCar:MovieClip;    private var enemyCarClip:MovieClip;    private var laneWidth:Number;    private static var GAME_OVER_TEXT:String;    private static var SCORE:Number = 0;    private static var THE_SCORE_TEXT:TextField;    private static var SHOTS_FIRED:Number = 0;    private static var SHOTS_HIT:Number = 0;    private static var ENEMY_POINT:Number = 10;    private static var IS_GAME_OVER:Boolean = false;    private static var CREATE_ENEMY_TIMER:Number;    private static var ROAD_TIMER:Number;    private static var USER_CAR:MovieClip;    private static var THE_BULLET:MovieClip;    private static var ROAD_STARTING_Y:Number;    private static var MAIN_DEPTH:Number = 0;    private static var USER_DEPTH:Number = 0;    private static var ENEMY_DEPTH:Number = 0;    private static var ENEMY_NUMBER:Number = 0;    //private static var MAX_HEALTH:Number = 100;    //private static var DAMAGE_BULLET:Number = 25;    private static var USER_BULLET_SPEED:Number = 25;    private static var ENEMY_BULLET_SPEED:Number = 25;    private static var NUMBER_OF_LANES:Number = 4;    private static var DRIVING_SPEED:Number = 15;    private static var ENEMY_DRIVING_SPEED:Number = 15;    private static var ROAD_SPEED:Number = 15;    private static var LEFT_BOUND:Number;    private static var RIGHT_BOUND:Number;    private static var TOP_BOUND:Number;    private static var BOTTOM_BOUND:Number;    private static var CREATE_NEW_ENEMY:Number;    private static var ENEMY_INTERVAL_MIN:Number = 250;    private static var ENEMY_INTERVAL_MAX:Number = 1000;    //  ----------------------------------------  \\    //  INITIATE THE GAME, SET UP MAIN VARIABLES  \\        public function shootingGame(gameAreaRoad:MovieClip, gameArea:MovieClip, scoreText:TextField, gameTarget:MovieClip) {            Key.addListener(this);            Mouse.addListener(this);            ROAD_STARTING_Y = gameAreaRoad._y;            theRoad = gameAreaRoad;            THE_SCORE_TEXT = scoreText;            printScore();            gameAreaMask = gameArea;            gameAreaWidth = gameAreaRoad._width;            if (gameAreaRoad._height > Stage.height) {                gameAreaMask._height = Stage.height;                gameAreaHeight = Stage.height;            } else {                gameAreaMask._height = gameAreaRoad._height;                gameAreaHeight = gameAreaRoad._height;            }            LEFT_BOUND = gameArea._x;            RIGHT_BOUND = gameArea._x + gameAreaWidth;            TOP_BOUND = gameArea._height - (gameAreaHeight - gameArea._y);            BOTTOM_BOUND = TOP_BOUND + gameAreaHeight;            laneWidth = gameAreaWidth / NUMBER_OF_LANES;            gameTargetClip = gameTarget;            createUser();            CREATE_ENEMY_TIMER = setInterval(this, "createEnemy", 100);            ROAD_TIMER = setInterval(this, "moveRoad", 50);        }    //  ----------------------------------------  \\    //  -------------------  \\    //  CREATE THE USER CAR  \\        public function createUser() {            userCarClip = gameTargetClip.createEmptyMovieClip("userClip", MAIN_DEPTH);            MAIN_DEPTH++;            USER_CAR = userCarClip.attachMovie("mcUserCar1", "mcUserCar1", USER_DEPTH);            USER_DEPTH++;            positionUser();            RIGHT_BOUND -= USER_CAR._width;            BOTTOM_BOUND -= USER_CAR._height;        }    //  -------------------  \\    //  --------------------------------  \\    //  POSITION THE USER CAR (AT START)  \\        public function positionUser() {            USER_CAR._x = RIGHT_BOUND - (laneWidth - (laneWidth - USER_CAR._width) / 2);            USER_CAR._y = (gameAreaHeight - USER_CAR._height - (USER_CAR._height / 10));        }    //  --------------------------------  \\    //  --------------------  \\    //  CREATE THE ENEMY CAR  \\        private function createEnemy() {            clearInterval(CREATE_ENEMY_TIMER);            CREATE_NEW_ENEMY = Math2.getRandom(ENEMY_INTERVAL_MIN, ENEMY_INTERVAL_MAX);            CREATE_ENEMY_TIMER = setInterval(this, "createEnemy", CREATE_NEW_ENEMY);            enemyCarClip = gameTargetClip.createEmptyMovieClip("enemyClip" + ENEMY_NUMBER, MAIN_DEPTH);            enemyCar = enemyCarClip.attachMovie("mcEnemyCar1", "mcEnemyCar" + ENEMY_DEPTH, ENEMY_DEPTH);            positionEnemy();            enemyCar.onEnterFrame = function() {                if (IS_GAME_OVER) {                    delete this.onEnterFrame;                }                if (this._y <= BOTTOM_BOUND + this._height + USER_CAR._height) {                    this._y += ENEMY_DRIVING_SPEED;                    if (this.hitTest(THE_BULLET)) {                        enemyDie(this, true);                        delete this.onEnterFrame;                        THE_BULLET.removeMovieClip();                    }                    if (this.hitTest(USER_CAR)) {                        gameOver(this);                        delete this.onEnterFrame;                    }                } else {                    delete this.onEnterFrame;                }            }            printScore();            ENEMY_NUMBER++;            MAIN_DEPTH++;            ENEMY_DEPTH++;        }    //  --------------------  \\    //  ----------------------  \\    //  POSITION THE ENEMY CAR  \\        public function positionEnemy():Void {            enemyCar._y = TOP_BOUND;            enemyCar._x = ((laneWidth - enemyCar._width) / 2) + ((Math.floor(Math.random() * NUMBER_OF_LANES)) * laneWidth);        }    //  ----------------------  \\    //  -------------------  \\    //  MOVE THE BACKGROUND  \\        public function moveRoad():Void {            (theRoad._y >= 0) ? theRoad._y = ROAD_STARTING_Y : theRoad._y += ROAD_SPEED;        }    //  -------------------  \\    //  ----------  \\    //  ENEMY FIRE  \\        private function enemyFire():Void {        }    //  ----------  \\    //  ---------  \\    //  ENEMY DIE  \\        private static function enemyDie(enemyClip, isBullet) {            if (isBullet) {                SHOTS_HIT++;                enemyClip.removeMovieClip();                SCORE += ENEMY_POINT;                printScore();            } else {                trace("enemy killed");            }        }    //  ---------  \\    //  ---------  \\    //  USER FIRE  \\        private function userFire(bulletX:Number, bulletY:Number):Void  {            SHOTS_FIRED++;            printScore();            THE_BULLET = userCarClip.attachMovie("mcUserBulletType_1", "mcUserBulletType_1_" + USER_DEPTH, USER_DEPTH);            THE_BULLET._y = bulletY;            THE_BULLET.onEnterFrame = function() {                if (this._y > TOP_BOUND) {                    this._x = bulletX;                    this._y -= (bulletY + this._y) * .05;                } else {                    delete this.onEnterFrame;                }            }            USER_DEPTH++;        }    //  ---------  \\    //  --------  \\    //  USER DIE  \\        private static function userDie():Void {            trace("user killed");        }    //  --------  \\    //  -----------------  \\    //  KEYBOARD CONTROLS  \\        /*private function onKeyDown():Void {            if (!IS_GAME_OVER) {                if (Key.getCode() eq Key.SPACE) {                  userFire(USER_CAR._x + (USER_CAR._width / 2), USER_CAR._y);                } else if (Key.getCode() eq Key.LEFT) {                  (USER_CAR._x > (LEFT_BOUND + DRIVING_SPEED)) ? USER_CAR._x -= DRIVING_SPEED : USER_CAR._x = LEFT_BOUND;                } else if (Key.getCode() eq Key.RIGHT) {                  (USER_CAR._x < (RIGHT_BOUND - DRIVING_SPEED)) ? USER_CAR._x += DRIVING_SPEED : USER_CAR._x = RIGHT_BOUND;                }            }        }*/    //  -----------------  \\    //  --------------  \\    //  MOUSE MOVEMENT  \\    private function onMouseMove():Void {        if (!IS_GAME_OVER) {            (USER_CAR._x > (LEFT_BOUND + DRIVING_SPEED)) ? USER_CAR._x = _xmouse : USER_CAR._x = LEFT_BOUND;            (USER_CAR._x < (RIGHT_BOUND - DRIVING_SPEED)) ? USER_CAR._x = _xmouse : USER_CAR._x = RIGHT_BOUND;        }    }    //  --------------  \\    //  ----------  \\    //  MOUSE FIRE  \\        private function onMouseDown():Void {            if (!IS_GAME_OVER) {                userFire(USER_CAR._x + (USER_CAR._width / 2), USER_CAR._y);            }        }    //  ----------  \\    //  -----------  \\    //  PRINT SCORE  \\        private static function printScore() {            (IS_GAME_OVER) ? GAME_OVER_TEXT = "GAME OVER \n" : GAME_OVER_TEXT = "";            THE_SCORE_TEXT.text = GAME_OVER_TEXT                                  + "Current Score: " + String(SCORE) + "\n"                                  + "Shots Fired: " + SHOTS_FIRED + "\n"                                  + "Shots Hit: " + SHOTS_HIT + "\n"                                  + "Hit Percentage: " + int((SHOTS_HIT / SHOTS_FIRED) * 100) + "%" + "\n"                                  + "Total Enemies: " + ENEMY_NUMBER + "\n"                                  + "Enemy Killed: " + (SHOTS_HIT) + "\n"                                  + "Enemy Killed Percentage: " + int((SHOTS_HIT / ENEMY_NUMBER) * 100) + "%";        }    //  -----------  \\    //  ---------  \\    //  GAME OVER  \\        private static function gameOver(enemyClip) {            IS_GAME_OVER = true;            printScore();            enemyDie(enemyClip, false);            userDie();            clearInterval(CREATE_ENEMY_TIMER);            clearInterval(ROAD_TIMER);        }    //  ---------  \\}