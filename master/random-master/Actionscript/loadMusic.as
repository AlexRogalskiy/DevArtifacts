// A class to load the information from the xml fileclass loadMusic extends MovieClip {    private static var mcMusicPlayer:MovieClip;    public static var songInfo:Array;    public static var currentSong:Number;    public static var numberOfSongs:Number;    private var timeInterval:String;    private var timer:String;    private var myTimer:String;    private var wait:String;    // Function that loads all the information from the xml file    function loadMusic() {        // Allowing the special characters        System.useCodepage = true;        // Creating an xml object        var xmlData = new XML();        // Ignore white space inside the xml file        xmlData.ignoreWhite = true;        // Where all the action begins        // The on Load function is where all the information is loaded from the xml file        xmlData.onLoad = function(success) {            // If the xml file was loaded successfully            if (success) {            // ************************************* \\            // ********** Loading the XML ********** \\                // Creating a new Array from the variable songInfo                // Array will become multi-dimensional and hold all song info                songInfo = new Array();                // Creating a variable to determine how many songs are in the xml file                numberOfSongs = xmlData.childNodes[0].childNodes.length;                // A loop the length of the numberOfSongs variable                // In other words, the number of songs inside the xml file                for (var song = 0; song < numberOfSongs; song++) {                    // Creating a multi-dimensional array from the songInfo array                    songInfo[song] = new Array();                    // This loop goes into each song inside the xml file                    // And gets all the info for each one                    for (var i = 0; i < xmlData.firstChild.childNodes[song].childNodes.length; i++) {                        // Loading the multi-dimensional array                        // Info can be retreated using "songInfo[x].nodeName"                        // Where x = a number from 0 to (number of songs - 1)                        // And nodeName is the nodeName entered inside the xml file                        songInfo[song][xmlData.firstChild.childNodes[song].childNodes[i].nodeName] = xmlData.firstChild.childNodes[song].childNodes[i].firstChild.nodeValue;                    }                }            // ********** Loading the XML ********** \\            // **********       END       ********** \\            // ************************************* \\            // ************************************************************* \\            // ********** Loading the info into text music player ********** \\                // The variable currentSong is used to determine                // Which song is currently playing.                // It is used with the songInfo array                currentSong = 0;                // Creating a empty movie clip on root                // Movie clip will hold the sound files                _root.createEmptyMovieClip("mcSound", 1);                // Calling the function startSong with the info from the songInfo Array                _root.mcSound.startSong(songInfo[currentSong].songFile,songInfo[currentSong].songTitle);            // ********** Loading the info into text music player ********** \\            // **********                   END                   ********** \\            // ************************************************************* \\            // If the xml file was not loaded properly            } else {                trace("xml not loaded properly");            }            // Delete the xml object            delete xmlData;        }    // ************************************************ \\    // ********** Function to load the music ********** \\        // Function to play the songs        MovieClip.prototype.startSong = function(songFile,songTitle) {            // When the functions gets called            // If there is already a soundObject, stop it and delete it            if (this.soundObject) {                this.soundObject.stop();                delete this.soundObject;            }            // Create new soundObject            this.soundObject = new Sound(this);            // Load the songFile that was used to call the function            // First value (ie: ...startSong(first value, second value);            this.soundObject.loadSound(songFile, true);            // Creating a preloader using onEnterFrame of new song            this.onEnterFrame = function() {                // Set mask to the text field                _root.mcMusicPlayer.mcSongTitle.setMask(_root.mcMusicPlayer.mask);                // If the sound position has moved                // Meaning the song is loaded and has begun to play                if (this.soundObject.position > 0) {                    // Clear interval which makes the song title scroll                    clearInterval(myTimer);                    // Position the song title to start at 150                    // 150 was determine by the width of the mask mc                    _root.mcMusicPlayer.mcSongTitle._x = 150;                    // delete enterFrame                    delete this.onEnterFrame;                    // Creating an interval to play                    //timeInterval = setInterval(timer, 1000, this.soundObject);                    // Enter the song title using the songTitle that was used to call the function                    // Second value (ie: ...startSong(first value, second value);                    _root.mcMusicPlayer.mcSongTitle.songTitle.text = (currentSong + 1) + ". " + songTitle;                    // Auto size the text field left                    // This will allow us to determine the width of the text field                    // Which will allow us to scroll it perfectly                    _root.mcMusicPlayer.mcSongTitle.songTitle.autoSize = "left";                    // An interval that calls the wait function                    // This functions scrolls the text                    myTimer = setInterval(wait, 300);                // If the sound has not moved                } else {                    // Place the text field at 0                    _root.mcMusicPlayer.mcSongTitle._x = 0;                    // Enter some text to show user the song is loading                    _root.mcMusicPlayer.mcSongTitle.songTitle.text = "Loading... ";                }            }            // When the song is completed            // Move on to the next one            this.soundObject.onSoundComplete = function() {                // Clear interval that scrolls the text                clearInterval(myTimer);                // If the currentSong is the last one                if (currentSong eq (numberOfSongs - 1)) {                    // Start over                    currentSong = 0;                // If the currentSong is not the last one                } else {                    // Move to the next one                    currentSong++;                }                // Call the startSong function with the new song info                _root.mcSound.startSong(songInfo[currentSong].songFile,songInfo[currentSong].songTitle);            }        }    // ********** Function to load the music ********** \\    // **********             END            ********** \\    // ************************************************ \\    // ******************************************************* \\    // ********** Function to scroll the song title ********** \\        // Function wait is being called when a song loads        // The call is found in the onEnterFrame of the new sound object        function wait() {            // If the x position of the song title movie clip is less than or equal to            // The starting point of the mask minus the lenght of the text field            // ie: mask starting point - text field width            // The following works using -(text field width) because            // The mask starting point is 0            if (_root.mcMusicPlayer.mcSongTitle._x <= -(_root.mcMusicPlayer.mcSongTitle.songTitle._width)) {                // Move the text field movie clip to then end point of the mask                // In this case, the mask is 150 wide and starts at 0                // ie: mask starting point + mask width                _root.mcMusicPlayer.mcSongTitle._x = 150;            }            // The song title movie clip moves 10 pixels to the left            // Each time the interval has been reached            _root.mcMusicPlayer.mcSongTitle._x = _root.mcMusicPlayer.mcSongTitle._x - 10;        }    // ********** Function to scroll the song title ********** \\    // **********                END                ********** \\    // ******************************************************* \\    // ************************************** \\    // ********** Button functions ********** \\        // PREV BUTTON        _root.mcMusicPlayer.btnPrev.onRelease = function() {            // Clear interval that scrolls the text            clearInterval(myTimer);            // If the currentSong is the first one            if (currentSong eq 0) {                // Move to the last one                currentSong = (numberOfSongs - 1);            // If the currentSong is not the first one            } else {                // Move to the previous one                currentSong--;            }            // Call the startSong function with the new song info            _root.mcSound.startSong(songInfo[currentSong].songFile,songInfo[currentSong].songTitle);        }        // NEXT BUTTON        _root.mcMusicPlayer.btnNext.onRelease = function() {            // Clear interval that scrolls the text            clearInterval(myTimer);            // If the currentSong is the last one            if (currentSong eq (numberOfSongs - 1)) {                // Start over                currentSong = 0;            // If the currentSong is not the last one            } else {                // Move to the next one                currentSong++;            }            // Call the startSong function with the new song info            _root.mcSound.startSong(songInfo[currentSong].songFile,songInfo[currentSong].songTitle);        }        // STOP BUTTON        _root.mcMusicPlayer.btnStop.onRelease = function() {            // Clear interval that scrolls the text            clearInterval(myTimer);            // Move the song title text to the end point of the mask            _root.mcMusicPlayer.mcSongTitle._x = 150;            // Change the song title text to alert the user that the music has been stopped            _root.mcMusicPlayer.mcSongTitle.songTitle.text = "Music Stopped...";            // Stop the sound object            _root.mcSound.soundObject.stop();        }        // PLAY BUTTON        _root.mcMusicPlayer.btnPlay.onRelease = function() {            // Clear interval that scrolls the text            clearInterval(myTimer);            // Call the startSong function with the new song info            _root.mcSound.startSong(songInfo[currentSong].songFile,songInfo[currentSong].songTitle);        }    // ********** Button functions ********** \\    // **********        END       ********** \\    // ************************************** \\        // Which xml file to load        xmlData.load("_xml/musicList.xml");    }}