<?xml version="1.0"?>
<project name="Simple" default="build" basedir=".">

   <target name="-layout">
      <property name="root.path" value="."/>                
      <property name="source.path" value="src"/>  
      <property name="application.path" value="application"/>
      <property name="work.path" value="work"/>      
      <property name="script.path" value="script"/> 
      <property name="maven.path" value="maven"/> 
      <property name="main.source.path" value="src/main/java"/>            
      <property name="test.source.path" value="src/test/java"/>
      <property name="site.path" value="site/php"/>
      <property name="javadoc.path" value="${site.path}/doc/javadoc"/>
      <property name="tutorial.path" value="${site.path}/doc/tutorial"/>
      <property name="build.path" value="build"/>
      <property name="target.path" value="target"/>
      <property name="main.build.path" value="build/main"/>            
      <property name="test.build.path" value="build/test"/>
      <property name="instrumented.build.path" value="build/instrumented"/>
      <property name="jar.path" value="jar"/>
      <property name="lib.path" value="lib"/>
      <property name="package.path" value="package"/>
      <property name="test.path" value="test"/>
      <property name="conf.path" value="conf"/>
      <property name="example.path" value="example"/>
      <property name="skel.core.path" value="skel/core"/>
      <property name="report.path" value="report"/>
      <property name="test.report.path" value="report/test"/>
      <property name="cobertura.report.path" value="${site.path}/doc/source"/>
      <property name="cobertura.data" value="cobertura.ser"/>
      <property file="build.properties"/>
      <property file="ssh.properties"/>     
      <property file="site.properties"/> 
   </target>

   <target name="-clean" depends="-layout">
      <delete dir="${build.path}"/>
      <delete dir="${jar.path}"/>
      <delete dir="${maven.path}"/>
   </target>

   <target name="-prepare" depends="-clean">
      <mkdir dir="${maven.path}"/>
      <mkdir dir="${build.path}"/>
      <mkdir dir="${main.build.path}"/>
      <mkdir dir="${test.build.path}"/>
      <mkdir dir="${instrumented.build.path}"/>
      <mkdir dir="${report.path}"/>
      <mkdir dir="${test.report.path}"/>
      <mkdir dir="${cobertura.report.path}"/>
      <mkdir dir="${jar.path}"/>
   </target>

   <target name="-setup" depends="-prepare"/>

   <target name="-compile" depends="-setup">
      <javac srcdir="${main.source.path}" destdir="${main.build.path}" debug="true" debuglevel="lines,vars,source" source="1.5" encoding="UTF-8">
         <classpath>
            <fileset dir="${lib.path}">
               <include name="**/*.jar"/>
            </fileset>
         </classpath>
      </javac>
      <copy todir="${main.build.path}">
         <fileset dir="${main.source.path}">
            <include name="**/*.properties"/> 
            <exclude name="**/*.java"/>
         </fileset>
      </copy>
      <javac srcdir="${test.source.path}" destdir="${test.build.path}" debug="true" debuglevel="lines,vars,source" source="1.5" encoding="UTF-8">
         <classpath>
            <fileset dir="${lib.path}">
               <include name="**/*.jar"/>
            </fileset>
            <pathelement path="${main.build.path}"/>
         </classpath>
      </javac>
   </target>

   <target name="build" depends="-compile" description="Compile and build project archive">
     <jar jarfile="${jar.path}/${build.name}.jar" basedir="${main.build.path}"/>
      <delete dir="${build.path}"/>
   </target>

   <target name="-instrument" depends="-compile">
      <cobertura-instrument todir="${instrumented.build.path}" datafile="${build.path}/${cobertura.data}">
         <fileset dir="${main.build.path}">
            <include name="**/*.class"/>
         </fileset>
      </cobertura-instrument>
   </target>

   <target name="-coverage" depends="-instrument">
      <junit showoutput="yes" printsummary="yes" maxmemory="1400m" haltonfailure="yes" fork="yes">
	     <sysproperty key="net.sourceforge.cobertura.datafile"  file="${build.path}/${cobertura.data}" />
         <classpath location="${instrumented.build.path}"/>
         <classpath location="${test.build.path}"/>
         <classpath location="${main.build.path}"/>
         <classpath>
            <fileset dir="${lib.path}">
               <include name="**/*.jar"/>
            </fileset>
         </classpath>
         <formatter type="plain"/>
         <batchtest fork="yes" todir="${test.report.path}">
            <fileset dir="${build.path}/test">
               <include name="**/*Test.class"/>
               <exclude name="**/*TestSuite.class"/>
               <exclude name="**/DistributorTest.class"/> 
               <exclude name="**/SessionTest.class"/>                
               <exclude name="**/FormTest.class"/> 
               <exclude name="**/ChunkedBodyTest.class"/> 
            </fileset>
         </batchtest>
      </junit>
   </target>

   <target name="report" depends="-coverage" description="Generate a coverage report with project unit tests">
      <mkdir dir="${cobertura.report.path}"/>
      <cobertura-report destdir="${cobertura.report.path}" datafile="${build.path}/${cobertura.data}">
         <fileset dir="${main.source.path}">
            <include name="**/*.java" />
            <exclude name="**/*Test.class" />
            <exclude name="**/*TestSuite.class"/>
            <exclude name="**/DistributorTest.class"/> 
            <exclude name="**/SessionTest.class"/>  
         </fileset>
      </cobertura-report>
      <delete dir="${build.path}"/>
   </target>

   <target name="test" depends="-compile" description="Compile project and run unit tests">
      <junit showoutput="true" printsummary="yes" haltonfailure="yes" fork="yes">
         <classpath location="${main.build.path}"/>
         <classpath location="${test.build.path}"/>
         <classpath>
            <fileset dir="${lib.path}">
               <include name="**/*.jar"/>
            </fileset>
         </classpath>
         <formatter type="plain"/>
         <batchtest fork="yes" todir="${test.report.path}">
            <fileset dir="${test.build.path}">
               <include name="**/*Test.class"/>
               <exclude name="**/*TestSuite.class"/>
               <exclude name="**/DistributorTest.class"/>               
            </fileset>
         </batchtest>
      </junit>
      <delete dir="${build.path}"/>
   </target>

   <target name="run" depends="-layout">
      <fail unless="service">Service configuration path must be specified</fail>  
      <fail unless="location">Service location must be specified</fail>
      <echo message="Starting process with '${service}' at '${location}'"/>      
      <copy todir="${work.path}/${service}/${location}" overwrite="true">
         <fileset dir="${application.path}/${service}/${location}">
            <include name="**/*"/>
            <exclude name=".svn"/>
        </fileset>              
      </copy>
      <copy todir="${work.path}/${service}/${location}" overwrite="true">
        <fileset dir="${application.path}">
            <include name="*.properties"/>
            <exclude name=".svn"/>
        </fileset>
      </copy>
      <copy todir="${work.path}/${service}/${location}" overwrite="true">
        <fileset dir="${application.path}/${service}">
            <include name="*.properties"/>
            <exclude name=".svn"/>
        </fileset>
      </copy>
      <copy file="${application.path}/${service}/Application.xml" todir="${work.path}/${service}/${location}" overwrite="true"/>
      <java className="org.simpleframework.location.Start" fork="yes">
        <classpath>              
            <fileset dir="${lib.path}">
               <include name="**/*.jar"/>
            </fileset>
            <fileset dir="${jar.path}">
               <include name="**/*.jar"/>
           </fileset>
        </classpath>              
        <arg value="${work.path}/${service}/${location}"/>
        <arg value="${service}"/>
        <arg value="${location}"/>
      </java>
      <echo message="Finished running process, exiting"/>
   </target>

   <target name="package" depends="test" description="Build and test project for a new release">
      <mkdir dir="${package.path}/${build.path}"/>
      <mkdir dir="${package.path}/${build.path}/${build.name}-${build.version}"/>
      <copy todir="${package.path}/${build.path}/${build.name}-${build.version}/${source.path}">
         <fileset dir="${main.source.path}"> 
            <exclude name="**/*.class"/>
         </fileset>
      </copy>
      <copy todir="${package.path}/${build.path}/${build.name}-${build.version}/${doc.path}">
         <fileset file="${doc.path}"/>
      </copy>
      <copy todir="${package.path}/${build.path}/${build.name}-${build.version}/${test.path}">
         <fileset dir="${skel.core.path}/${test.path}"/>
      </copy>
      <copy todir="${package.path}/${build.path}/${build.name}-${build.version}/${test.path}/${source.path}">
         <fileset dir="${test.source.path}"/>
      </copy>
      <copy todir="${package.path}/${build.path}/${build.name}-${build.version}">
         <fileset file="${skel.core.path}/build.xml"/>
         <filterset>
            <filter token="version" value="${build.version}"/>
         </filterset>
      </copy>
      <mkdir dir="${package.path}/${build.version}"/>
      <ant antfile="build.xml" dir="${package.path}/${build.path}/${build.name}-${build.version}" target="all" inheritall="false"/>
      <ant antfile="build.xml" dir="${package.path}/${build.path}/${build.name}-${build.version}/${test.path}" target="test" inheritall="false"/>
      <zip destfile="${package.path}/${build.version}/${build.name}-${build.version}.zip" basedir="${package.path}/${build.path}"/>
      <tar tarfile="${package.path}/${build.version}/${build.name}-${build.version}.tar" basedir="${package.path}/${build.path}"/>
      <gzip zipfile="${package.path}/${build.version}/${build.name}-${build.version}.tar.gz" src="${package.path}/${build.version}/${build.name}-${build.version}.tar"/>
      <tstamp>
         <format property="build.time" pattern="d MMMM yyyy" locale="en"/>
      </tstamp>
      <copy todir="${package.path}/${build.version}">
         <fileset file="${skel.core.path}/build.time"/>
         <filterset>
            <filter token="timestamp" value="${build.time}"/>
         </filterset>
      </copy>
      <delete file="${package.path}/${build.version}/${build.name}-${build.version}.tar"/>
      <delete dir="${package.path}/${build.path}"/>
      <delete dir="${build.path}"/>
      <antcall target="javadoc"/>
   </target>

   <target name="pom" depends="-prepare" description="Create maven bundle">
      <copy todir="${root.path}" overwrite="true">
         <fileset dir="${script.path}">
            <include name="pom.xml"/>
    </fileset>

         <filterset>
            <filtersfile file="${root.path}/build.properties"/>
         </filterset>
      </copy>
   </target>

  <target name="maven" depends="-prepare">
      <copy todir="${root.path}" overwrite="true">
         <fileset dir="${script.path}">
            <include name="pom.xml"/>
         </fileset>
         <filterset>
            <filtersfile file="${root.path}/build.properties"/>
         </filterset>
      </copy>
      <delete dir="${target.path}/maven"/>       
      <delete dir="${target.path}/maven/maven-metadata.xml"/>        
      <mkdir dir="${target.path}/maven"/>
      <mkdir dir="${target.path}/maven/${build.version}"/>
      <copy todir="${target.path}/maven/${build.version}">
         <fileset dir="${target.path}">
            <include name="${build.name}-${build.version}.jar"/>
            <include name="${build.name}-${build.version}-sources.jar"/>
            <include name="${build.name}-${build.version}-javadoc.jar"/>
         </fileset>
         <fileset dir="${root.path}">
            <include name="pom.xml"/>
         </fileset>        
      </copy>       
      <get src="http://www.simpleframework.org/maven/org/simpleframework/simple/maven-metadata.xml" dest="${root.path}/maven-metadata.xml"/>
      <copy todir="${target.path}" overwrite="true">
         <fileset dir="${root.path}">
            <include name="maven-metadata.xml"/>             
         </fileset>   
      </copy>      
      <replace file="${target.path}/maven-metadata.xml">
         <replacetoken><![CDATA[</versions>]]></replacetoken>
         <replacevalue><![CDATA[  <version>@version@</version>
    </versions>]]></replacevalue>
      </replace> 
      <copy todir="${target.path}/maven">
         <fileset dir="${target.path}">
            <include name="maven-metadata.xml"/>             
         </fileset>   
         <filterset>
            <filtersfile file="${root.path}/build.properties"/>
         </filterset>        
      </copy> 
      <move file="${target.path}/maven/${build.version}/pom.xml" tofile="${target.path}/maven/${build.version}/${build.name}-${build.version}.pom"/>
      <exec executable="gpg">
         <arg value="-ab"/>
         <arg value="--passphrase"/>
         <arg value="${password}"/>
         <arg value="${target.path}/maven/${build.version}/${build.name}-${build.version}.jar"/>
      </exec>
      <exec executable="gpg">
         <arg value="-ab"/>
         <arg value="--passphrase"/>
         <arg value="${password}"/>
         <arg value="${target.path}/maven/${build.version}/${build.name}-${build.version}-sources.jar"/>
      </exec>
      <exec executable="gpg">
         <arg value="-ab"/>
         <arg value="--passphrase"/>
         <arg value="${password}"/>
         <arg value="${target.path}/maven/${build.version}/${build.name}-${build.version}-javadoc.jar"/>
      </exec>
      <exec executable="gpg">
         <arg value="-ab"/>
         <arg value="--passphrase"/>
         <arg value="${password}"/>
         <arg value="${target.path}/maven/${build.version}/${build.name}-${build.version}.pom"/>
      </exec>
      <!--checksum file="${target.path}/maven/${build.version}/${build.name}-${build.version}.jar" algorithm="SHA1" fileext=".sha1"/>
      <checksum file="${target.path}/maven/${build.version}/${build.name}-${build.version}.jar" algorithm="MD5" fileext=".md5"/>      
      <checksum file="${target.path}/maven/${build.version}/${build.name}-${build.version}.jar.asc" algorithm="SHA1" fileext=".sha1"/>
      <checksum file="${target.path}/maven/${build.version}/${build.name}-${build.version}.jar.asc" algorithm="MD5" fileext=".md5"/>
      <checksum file="${target.path}/maven/${build.version}/${build.name}-${build.version}-sources.jar" algorithm="SHA1" fileext=".sha1"/>
      <checksum file="${target.path}/maven/${build.version}/${build.name}-${build.version}-sources.jar" algorithm="MD5" fileext=".md5"/> 
      <checksum file="${target.path}/maven/${build.version}/${build.name}-${build.version}-sources.jar.asc" algorithm="SHA1" fileext=".sha1"/>
      <checksum file="${target.path}/maven/${build.version}/${build.name}-${build.version}-sources.jar.asc" algorithm="MD5" fileext=".md5"/>
      <checksum file="${target.path}/maven/${build.version}/${build.name}-${build.version}-javadoc.jar" algorithm="SHA1" fileext=".sha1"/>
      <checksum file="${target.path}/maven/${build.version}/${build.name}-${build.version}-javadoc.jar" algorithm="MD5" fileext=".md5"/>
      <checksum file="${target.path}/maven/${build.version}/${build.name}-${build.version}-javadoc.jar.asc" algorithm="SHA1" fileext=".sha1"/>
      <checksum file="${target.path}/maven/${build.version}/${build.name}-${build.version}-javadoc.jar.asc" algorithm="MD5" fileext=".md5"/>
      <checksum file="${target.path}/maven/${build.version}/${build.name}-${build.version}.pom" algorithm="SHA1" fileext=".sha1"/>
      <checksum file="${target.path}/maven/${build.version}/${build.name}-${build.version}.pom" algorithm="MD5" fileext=".md5"/>
      <checksum file="${target.path}/maven/${build.version}/${build.name}-${build.version}.pom.asc" algorithm="SHA1" fileext=".sha1"/>
      <checksum file="${target.path}/maven/${build.version}/${build.name}-${build.version}.pom.asc" algorithm="MD5" fileext=".md5"/>
      <checksum file="${target.path}/maven/maven-metadata.xml" algorithm="SHA1" fileext=".sha1"/>
      <checksum file="${target.path}/maven/maven-metadata.xml" algorithm="MD5" fileext=".md5"/-->    
      <zip destfile="${root.path}/maven-${build.version}.zip" basedir="${target.path}/maven"/>      
      <jar destfile="${root.path}/bundle-${build.version}.jar" basedir="${target.path}/maven/${build.version}"/>
   </target>

   <target name="javadoc" depends="-layout" description="Generate source documentation">
      <mkdir dir="${javadoc.path}"/>
      <javadoc sourcepath="${main.source.path}" packagenames="org.simpleframework.*" destdir="${javadoc.path}" private="false">
         <classpath>
            <fileset dir="${lib.path}">
               <include name="**/*.jar"/>
            </fileset>
         </classpath>
      <link href="http://java.sun.com/j2se/1.5.0/docs/api/"/>  
      </javadoc>
      <delete dir="${build.path}"/>
   </target>

</project>
