// All keys used in Firebase are subject to the following limitations:
// https://firebase.google.com/docs/database/web/structure-data
//
//   If you create your own keys, they must be UTF-8 encoded, can be a maximum
//   of 768 bytes, and cannot contain ., $, #, [, ], /, or ASCII control
//   characters 0-31 or 127.
//
// This will impose restrictions on the values that can be used as keys within
// the Firebase database.  The restrictions on the keys, if any, are described
// in the key description that precedes the key as it is introduced in the
// rules.
//
// The following rules may be installed into a project's Firebase Realtime
// Database via the project's Firebase console:
// https://console.firebase.google.com/
{
  "rules": {
    "bbmsdk" : {
      "identity": {
        //User records can be written by the record creator and read by all authenticated users
        "users" : {
          ".read": "auth != null",
          "$uid": {
            ".write": "auth != null && auth.uid == $uid"
          }
        }
  		}
    },
    "sampleapps": {
      ".read": "auth != null",
        ".write": "auth != null"
    },
    // The Private Key Store is used to store a user's private keys for both
    // encryption and signing purposes as well as the symmetric key for each
    // mailbox to which the user is subscribed.
    //
    // The private key store entry containing a user's regId must be the first
    // user record created.
    //
    // The private key store of a user cannot be deleted until the regId
    // ownership claimed in the regIds index has been removed.  This
    // restriction ensures that regId entries and public key store data for a
    // user cannot be orphaned.
    "privateKeyStore": {
      // Indexed by the Firebase user's OAuth ID.  The UID is system assigned
      // and requires no special treatment or encoding to be used as a key.
      "$uid": {
        // Reading is restricted to authenticated users whose UID matches the
        // UID of the record.
        ".read": "auth != null && auth.uid == $uid",

        // The following restrictions are used to determine whether a write to
        // the record is allowed:
        // 1) The user must be authenticated and their UID must match the UID
        //    of the record; and
        // 2) New data being written is always allowed (it must additionally
        //    pass verification checks); or
        // 3) Deleting a record that does not exist is always allowed; or
        // 4) The deletion of a record can only proceed if:
        //    * The claim in the regIds index associated with this record
        //      does not exist; or
        //    * The claim in the regIds index associated with this record
        //      is not associated with the UID of the record being removed.
        ".write": "
          auth != null && auth.uid == $uid &&
          (newData.exists() || !data.exists() ||
           !root.child('regIds').child(data.child('regId').val()).exists() ||
           root.child('regIds').child(data.child('regId').val()).val() != $uid)",
        // When the private key store data is being set outright, it must
        // always contain a regId member.


        ".validate": "newData.child('regId').exists()",
        // The regId is the BBM identifier for a user and it must be
        // authoritatively associated with an authorized user of the system.
        // The first part of guaranteeing a 1:1 relationship between a regId
        // and a UID is to declare that a UID 'owns' a given regId when the
        // private key store data is created.
        //
        // Because claiming ownership of a regId is a two step process, it is
        // possible to encounter races between different users who have been
        // incorrectly assigned the same regId.  A user who is unable to
        // complete the process to claim a regId must still be able to change
        // the regId associated with their UID so that they can declare their
        // intent to make a claim on another regId if they are somehow able to
        // obtain one.
        //
        // In order for the regId to be written it must meet the following
        // criteria:
        // 1) The new regId value must be a non-empty string; and
        // 2) The existing regId value must:
        //    * Not exist (new record); or
        //    * The existing regId must not yet be claimed in the regIds
        //      index; or
        //    * The existing regId must not be claimed by the current user; or
        //    * Be the same regId as the new value being claimed; and
        // 3) The new regId value must:
        //    * Not yet be claimed in the regIds index; or
        //    * Be already claimed by the current user
        //
        // The regId value is system assigned and numeric and may be inserted
        // without any additional encoding.
        "regId": {
          ".validate": "
            newData.isString() && newData.val().length > 0 &&
            (! data.exists() ||
             ! root.child('regIds').child(data.val()).exists() ||
             root.child('regIds').child(data.val()).val() != auth.uid ||
             newData.val() == data.val()) &&
            (! root.child('regIds').child(newData.val()).exists() ||
            root.child('regIds').child(newData.val()).val() == auth.uid)"
        },


        // The encryptionKey must be a non-empty string when it is being set.
        //
        // The encryptionKey value contains binary data and must be encoded as
        // a base64url string without padding.
        "encryptionKey": {
          ".validate": "newData.isString() && newData.val().length > 0"
        },


        // The signingKey must be a non-empty string when it is being set.
        //
        // The signingKey value contains binary data and must be encoded as
        // a base64url string without padding.
        "signingKey": {
          ".validate": "newData.isString() && newData.val().length > 0"
        },


        // Each mailbox symmetric key must be a non-empty string when it is
        // being set.
        "mailboxes": {
          // The mailboxId assigned by the BBM infrastructure may contain
          // characters that are illegal for use as a Firebase key.  To ensure
          // that it can be used as a key, it must be encoded as a base64url
          // string without padding.
          //
          // The mailbox key value contains binary data and must be encoded as
          // a base64url string without padding.
          "$mailboxId": {
            ".validate": "newData.isString() && newData.val().length > 0"
          }
        }
      }
    },


    // The mapping of regIds to the UIDs that have claimed them.  This is used
    // as an index to maintain data integrity and complete the 1:1 guarantee
    // between UIDs and regIds employed within this key store.
    //
    // An entry in this index authoritatively declares the UID associated with
    // the regId as the owner.  Thus, this index is also used to enforce
    // access control permissions on the public key store data (defined
    // below).
    //
    // An entry in this index must be the second user record created.
    //
    // An entry in this index cannot be deleted until the public key store
    // data associated with the regId has been removed.  This restriction
    // ensures that public key stores cannot be orphaned.
    //
    // The regId assigned by the BBM system is numeric an has no need of
    // further encoding to be used as a key.
    "regIds": {
      "$regId": {
        // No one is allowed to read/query this index.
        ".read": false,
        // The following restrictions are used to determine whether a write to
        // this record is allowed:
        // 1) A user must be authenticated to write; and
        // 2) An existing entry must be owned by the authenticated user
        //    attempting the write; and
        // 3) New data being written is always allowed (it must additionally
        //    pass verification checks); or
        // 4) Deleting a record that does not exist is always allowed; or
        // 5) The deletion of a record can only proceed if there is no
        //    public key store data associated with the regId.


        ".write": "
          auth != null &&
          (!data.exists() || data.val() == auth.uid) &&
          (newData.exists() || !data.exists() ||
           !root.child('publicKeyStore').child($regId).exists())",
        // In order for the record to written, the UID being associated with
        // the regId must meet the following criteria:
        // 1) Must be the UID of the current authenticated user; and
        // 2) The current authenticated user must have an entry in the private
        //    key store; and
        // 3) The current authenticated user's private key store entry must
        //    have a regId value declared; and
        // 4) The current authenticated user's regId value declared in their
        //    private key store entry must match the regId or the record being
        //    written.


        ".validate": "
          newData.val() == auth.uid &&
          root.child('privateKeyStore').child(auth.uid).exists() &&
          root.child('privateKeyStore').child(auth.uid).child('regId').exists() &&
          root.child('privateKeyStore').child(auth.uid).child('regId').val() == $regId"
      }
    },


    // The Public Key Store is used to store a user's public keys for
    // both encryption and signing purposes.
    //
    // To create a public key store entry, a user must first have claimed the
    // regId under which the public keys are to be advertised.  This means
    // they must first have:
    // 1) a private key store entry with the regId value
    // 2) a regIds entry associating the regId value with their UID
    //
    // Public key data may be deleted by the regId owner without restriction.
    "publicKeyStore": {
      // The public key data is stored by regId.  This allows other users to
      // find the public keys of any user for whom they have a regId.
      //
      // The regId assigned by the BBM system is numeric an has no need of
      // further encoding to be used as a key.
      "$regId": {
        // Any authenticated user can read the public key data.
        ".read": "auth != null",


        // The following restrictions are used to determine whether a write to
        // the record is allowed:
        // 1) The user must be authenticated; and
        // 2) The user must be the owner of the regId in the regIds index; or
        // 3) A record that does not exist is being deleted.
        ".write": "
          auth != null &&
          (root.child('regIds').child($regId).exists() &&
           root.child('regIds').child($regId).val() == auth.uid) ||
          (!newData.exists() && !data.exists())",


        // The encryptionKey must be a non-empty string when it is being set.
        //
        // The encryptionKey value contains binary data and must be encoded as
        // a base64url string without padding.
        "encryptionKey": {
          ".validate": "newData.isString() && newData.val().length > 0"
        },


        // The signingKey must be a non-empty string when it is being set.
        //
        // The signingKey value contains binary data and must be encoded as
        // a base64url string without padding.
        "signingKey": {
          ".validate": "newData.isString() && newData.val().length > 0"
        }
      }
    }
  }
}