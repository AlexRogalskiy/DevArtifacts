// Generated by CoffeeScript 1.6.2
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define('views/Editor', ['views/ProtoView', 'backbone', 'collections/IconsCollection', 'collections/IconCollection', 'collectionViews/IconsCollectionView'], function(ProtoView, Backbone, IconsCollection, IconCollection, IconsCollectionView) {
    var Editor, _ref;

    Editor = (function(_super) {
      __extends(Editor, _super);

      function Editor() {
        _ref = Editor.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      Editor.prototype.template = '#editor-template';

      Editor.prototype.GRID_DELAY = 200;

      Editor.prototype.initialize = function(o) {
        var _ref1, _ref2;

        this.o = o != null ? o : {};
        if ((_ref1 = this.model) != null) {
          _ref1.on('change:imageHeight', this.render);
        }
        return (_ref2 = this.model) != null ? _ref2.on('change:imageWidth', this.render) : void 0;
      };

      Editor.prototype.render = function() {
        Editor.__super__.render.apply(this, arguments);
        App.addRegions({
          icons: '#js-icons-region'
        });
        this.$grid = this.$('.js-grid');
        !this.imgLoaded && this.loadImage();
        this.showIcons();
        this.showGrid();
        return this;
      };

      Editor.prototype.showGrid = function() {
        var _this = this;

        clearTimeout(this.gridTimeout);
        return this.gridTimeout = setTimeout(function() {
          var gridColor, gridSize, gridWidth;

          gridSize = _this.model.get('iconSize');
          gridWidth = 1;
          gridColor = 'white';
          return _this.$grid.css({
            'background-image': "repeating-linear-gradient(0deg, " + gridColor + ", " + gridColor + " 0px, transparent " + gridWidth + "px, transparent " + gridSize + "px), repeating-linear-gradient(-90deg, " + gridColor + ", " + gridColor + " 0px, transparent " + gridWidth + "px, transparent " + gridSize + "px)",
            'background-size': "" + gridSize + "px " + gridSize + "px",
            'background-position': "" + (gridWidth / 2) + "px " + (gridWidth / 2) + "px"
          });
        }, this.GRID_DELAY);
      };

      Editor.prototype.loadImage = function() {
        var _this = this;

        this.imgLoaded = true;
        this.$img = $('<img>').on('load', function() {
          _this.model.set('imageHeight', _this.$img[0].height);
          return _this.model.set('imageWidth', _this.$img[0].width);
        });
        return this.$img[0].src = this.model.get('url');
      };

      Editor.prototype.showIcons = function() {
        var _this = this;

        return _.defer(function() {
          _this.iconsCollection = new IconsCollection(_this.o.theme.data);
          _this.iconsCollectionView = new IconsCollectionView({
            collection: _this.iconsCollection,
            columnSize: _this.columnSize,
            rowSize: _this.rowSize,
            url: _this.model.get('url'),
            theme: _this.model.get('theme') || ''
          });
          return App.icons.show(_this.iconsCollectionView);
        });
      };

      return Editor;

    })(ProtoView);
    return Editor;
  });

}).call(this);
