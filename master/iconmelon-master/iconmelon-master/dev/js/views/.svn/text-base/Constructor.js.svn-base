// Generated by CoffeeScript 1.6.2
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define('views/Constructor', ['views/ProtoView', 'backbone', 'collections/IconsCollection', 'collections/IconCollection', 'collectionViews/IconsCollectionView'], function(ProtoView, Backbone, IconsCollection, IconCollection, IconsCollectionView) {
    var Constructor, _ref;

    Constructor = (function(_super) {
      __extends(Constructor, _super);

      function Constructor() {
        _ref = Constructor.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      Constructor.prototype.template = '#constructor-template';

      Constructor.prototype.className = "cf";

      Constructor.prototype.GRID_DELAY = 200;

      Constructor.prototype.bindings = {
        '#js-icon-size': {
          observe: 'iconSize',
          onSet: 'validateGridsize'
        },
        '#js-theme': {
          observe: 'theme',
          onSet: 'themeSet'
        }
      };

      Constructor.prototype.events = {
        'keyup': 'showGrid',
        'click #js-next:not(.is-inactive)': 'splitIcons'
      };

      Constructor.prototype.initialize = function(o) {
        var _ref1, _ref2, _ref3, _ref4,
          _this = this;

        this.o = o != null ? o : {};
        Constructor.__super__.initialize.apply(this, arguments);
        this.imgLoaded = false;
        this.btnTemplate = _.template($('#constructor-submit-template').html());
        if (this.o.mode === 'edit') {
          this.model.set('theme', this.o.theme.theme);
          this.model.set('isValid', true);
          this.loadImage().then(function() {
            return _this.splitIcons();
          });
        }
        if ((_ref1 = this.model) != null) {
          _ref1.on('change:imageHeight', this.render);
        }
        if ((_ref2 = this.model) != null) {
          _ref2.on('change:imageWidth', this.render);
        }
        !(this.o.mode === 'edit') && ((_ref3 = this.model) != null ? _ref3.on('change:isValid', _.bind(this.renderBtn, this)) : void 0);
        return (_ref4 = this.model) != null ? _ref4.on('change:theme', _.bind(this.validateNext, this)) : void 0;
      };

      Constructor.prototype.render = function() {
        Constructor.__super__.render.apply(this, arguments);
        this.renderInit();
        this.stickit();
        return this;
      };

      Constructor.prototype.renderInit = function() {
        this.$sprite = this.$('.js-sprite');
        this.$grid = this.$('.js-grid');
        this.$iconSizeI = this.$('#js-icon-size');
        this.renderBtn();
        this.imgLoaded || this.loadImage();
        this.showGrid();
        this.validateNext();
        return App.addRegions({
          icons: '#icons-region'
        });
      };

      Constructor.prototype.renderBtn = function() {
        return this.$('#js-btn-place').html(this.btnTemplate(this.model.toJSON()));
      };

      Constructor.prototype.themeSet = function(val) {
        val = $.trim(val);
        App.currentTheme = val;
        return val;
      };

      Constructor.prototype.validateTheme = function() {
        var valid;

        valid = true;
        if (App.themes[this.model.get('theme')]) {
          valid = false;
        }
        return valid;
      };

      Constructor.prototype.validateNext = function() {
        return this.model.set('isValid', this.model.get('iconSize') && this.model.get('theme') && this.validateTheme() ? true : false);
      };

      Constructor.prototype.loadImage = function() {
        var dfr,
          _this = this;

        dfr = new $.Deferred;
        this.imgLoaded = true;
        this.$img = $('<img>').on('load', function() {
          _this.model.set('imageHeight', _this.$img[0].height);
          _this.model.set('imageWidth', _this.$img[0].width);
          return dfr.resolve();
        });
        this.$img[0].src = this.model.get('url');
        return dfr.promise();
      };

      Constructor.prototype.showGrid = function() {
        var _this = this;

        clearTimeout(this.gridTimeout);
        return this.gridTimeout = setTimeout(function() {
          var gridColor, gridSize, gridWidth;

          gridSize = _this.model.get('iconSize');
          gridWidth = 1;
          gridColor = 'white';
          return _this.$grid.css({
            'background-image': "repeating-linear-gradient(0deg, " + gridColor + ", " + gridColor + " 0px, transparent " + gridWidth + "px, transparent " + gridSize + "px), repeating-linear-gradient(-90deg, " + gridColor + ", " + gridColor + " 0px, transparent " + gridWidth + "px, transparent " + gridSize + "px)",
            'background-size': "" + gridSize + "px " + gridSize + "px",
            'background-position': "" + (gridWidth / 2) + "px " + (gridWidth / 2) + "px"
          });
        }, this.GRID_DELAY);
      };

      Constructor.prototype.validateGridsize = function(val, options) {
        val = Math.max(1, parseInt(val));
        options.update(this.$iconSizeI, val || '');
        return val;
      };

      Constructor.prototype.splitIcons = function() {
        var _this = this;

        if (this.o.type === 'change-image') {
          return this.recalcIcons().then(function(data) {
            _this.o.theme.data = data.icons;
            _this.o.theme.columnSize = data.columnSize;
            _this.o.theme.rowSize = data.rowSize;
            return _this.routeShowIcons();
          });
        } else {
          return this.routeShowIcons();
        }
      };

      Constructor.prototype.routeShowIcons = function() {
        var _this = this;

        return _.defer(function() {
          if (_this.o.mode === 'edit') {
            return _this.showIcons(_this.o.theme);
          } else {
            return _this.showIcons(_this.calcIcons());
          }
        });
      };

      Constructor.prototype.showIcons = function(iconsData) {
        this.iconsCollection = new IconsCollection(iconsData.data);
        this.iconsCollectionView = new IconsCollectionView({
          collection: this.iconsCollection,
          mode: this.o.mode,
          options: iconsData
        });
        return App.icons.show(this.iconsCollectionView);
      };

      Constructor.prototype.recalcIcons = function() {
        var dfr,
          _this = this;

        dfr = new $.Deferred;
        this.loadImage().then(function() {
          var columnSize, data, icon, icons, modifier, rowSize;

          data = _this.calcSizes();
          rowSize = data.rowSize;
          columnSize = data.columnSize;
          icons = (function() {
            var _i, _results;

            _results = [];
            for (icon = _i = 0; 0 <= rowSize ? _i < rowSize : _i > rowSize; icon = 0 <= rowSize ? ++_i : --_i) {
              [];
              _results.push((function() {
                var _j, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _results1;

                _results1 = [];
                for (modifier = _j = 0; 0 <= columnSize ? _j < columnSize : _j > columnSize; modifier = 0 <= columnSize ? ++_j : --_j) {
                  _results1.push({
                    size: this.model.get('iconSize'),
                    xCoord: icon,
                    yCoord: modifier,
                    columnSize: columnSize,
                    rowSize: rowSize,
                    image: this.model.get('url'),
                    name: (_ref1 = this.o.theme.data) != null ? (_ref2 = _ref1[icon]) != null ? (_ref3 = _ref2[modifier]) != null ? _ref3.name : void 0 : void 0 : void 0,
                    "class": (_ref4 = this.o.theme.data) != null ? (_ref5 = _ref4[icon]) != null ? (_ref6 = _ref5[modifier]) != null ? _ref6["class"] : void 0 : void 0 : void 0,
                    isValidName: true
                  });
                }
                return _results1;
              }).call(this));
            }
            return _results;
          }).call(_this);
          return dfr.resolve({
            icons: icons,
            columnSize: columnSize,
            rowSize: rowSize
          });
        });
        return dfr.promise();
      };

      Constructor.prototype.calcSizes = function() {
        var columnSize, data, rowSize;

        columnSize = (this.model.get('imageHeight') / 2) / this.model.get('iconSize');
        rowSize = (this.model.get('imageWidth') / 2) / this.model.get('iconSize');
        return data = {
          columnSize: columnSize,
          rowSize: rowSize
        };
      };

      Constructor.prototype.calcIcons = function() {
        var columnSize, data, i, icons, j, rowSize;

        data = this.calcSizes();
        columnSize = data.columnSize;
        rowSize = data.rowSize;
        icons = (function() {
          var _i, _results;

          _results = [];
          for (i = _i = 0; 0 <= rowSize ? _i < rowSize : _i > rowSize; i = 0 <= rowSize ? ++_i : --_i) {
            [];
            _results.push((function() {
              var _j, _results1;

              _results1 = [];
              for (j = _j = 0; 0 <= columnSize ? _j < columnSize : _j > columnSize; j = 0 <= columnSize ? ++_j : --_j) {
                _results1.push({
                  size: this.model.get('iconSize'),
                  xCoord: i,
                  yCoord: j,
                  columnSize: columnSize,
                  rowSize: rowSize,
                  image: this.model.get('url')
                });
              }
              return _results1;
            }).call(this));
          }
          return _results;
        }).call(this);
        icons = {
          data: icons,
          image: this.model.get('url'),
          theme: this.model.get('theme'),
          pattern: null,
          columnSize: columnSize,
          rowSize: rowSize
        };
        return icons;
      };

      return Constructor;

    })(ProtoView);
    return Constructor;
  });

}).call(this);
