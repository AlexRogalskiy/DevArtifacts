# define 'views/IconEditView', ['views/ProtoView', 'underscore'], (ProtoView, _)->
# 	class IconView extends ProtoView
# 		template: '#icon-edit-template'
# 		className: ''

# 		bindings:
# 			'#name': 	'name'	
# 			'#theme': 	'theme'
# 			'#type': 	'type'
# 			'#guid': 	'guid'
# 			'#xCoord': 	'xCoord'
# 			'#yCoord': 	'yCoord'
# 			'#hover-xCoord': 	'xCoordHover'
# 			'#hover-yCoord': 	'yCoordHover'

# 			'#class': 	
# 				observe: 	'class'
# 				onSet: 		'setValueClass'

# 			'#name': 	
# 				observe: 	'name'
# 				onSet: 		'setValueName'

# 		events:
# 			'click #js-expand': 		'expand'
# 			'click #js-delete': 		'preDelete'
# 			'click #js-reestablish': 	'restore'
# 			'click #js-hover-state': 	'toggleHoverState'

# 		initialize:->
# 			super
# 			@index = @model.collection.indexOf @model
# 			@model.set 'isMainIcon', 0 is @index
# 			!@model.get('isMainIcon') 	and 	@listenToCollectionName()
# 			@model.get('isMainIcon') 	and 	(@model.collection.mainIcon = @model)

# 			@model.setRelativeCoordinates @index

# 			@model.on 'change:isDeleted', 			@render
# 			@model.on 'change:isCollectionDeleted', @render
# 			@model.on 'change:hoverState', 			@render
			
# 			@model.on 'change:xCoord', 			_.bind @changeCoords, @
# 			@model.on 'change:yCoord', 			_.bind @changeCoords, @

# 			@model.on 'change:xCoordHover', 	_.bind @delayedRender, @
# 			@model.on 'change:yCoordHover', 	_.bind @delayedRender, @

# 			@

# 		render:->
# 			super
# 			@stickit()
# 			@renderInit()
# 			@

# 		toggleHoverState:->
# 			@model.toggleHoverState()

# 		changeCoords:->
# 			@delayedRender()
# 			@model.get('isMainIcon') and $(@model.collection).trigger 'change:coords'


# 		delayedRender:->
# 			clearTimeout @delayedRenderTimeout
# 			@delayedRenderTimeout = setTimeout =>
# 				@wasFocusedId  = @$(':focus').attr 'id'
# 				@render()
# 				@$("##{@wasFocusedId}").focus()
# 			, 300

# 		listenToCollectionName:->
# 			$(@model.collection).on 'change:coords', =>
# 				!@model.get('isMainIcon') and @model.setRelativeCoordinates @index
# 				!@model.get('isMainIcon') and @delayedRender()

# 			$(@model.collection).on 'delete', =>
# 				@model.set 'isCollectionDeleted', true

# 			$(@model.collection).on 'restore', =>
# 				@model.set 'isCollectionDeleted', false

# 			App.vent.on 'change:adds', (adds)=>
# 				@model.set 'class', "#{@model.collection.class or ''}.is-#{@model.collection.adds?['class'][@index] or ''}"
# 				@model.set 'name', "#{@model.collection.name or ''} #{@model.collection.adds?['name'][@index] or ''}"

# 			$(@model.collection).on 'set:class', =>
# 				@model.set 'class', "#{@model.collection.class}.is-#{@model.collection.adds?['class'][@index] or ''}"

# 			$(@model.collection).on 'set:name', =>
# 				@model.set 'name', "#{@model.collection.name} #{@model.collection.adds?['name'][@index] or ''}"

# 		renderInit:->
# 			@

		


# 		setValueClass:(val, o)->
# 			if @model.get('isMainIcon')
# 				@model.collection.class = val
# 				$(@model.collection).trigger 'set:class'
# 			val

# 		setValueName:(val, o)->
# 			if @model.get('isMainIcon')
# 				@model.collection.name = val
# 				$(@model.collection).trigger 'set:name'
# 			val



# 	IconView