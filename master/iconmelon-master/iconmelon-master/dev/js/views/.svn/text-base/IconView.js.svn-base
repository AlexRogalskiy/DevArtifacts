// Generated by CoffeeScript 1.6.2
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define('views/IconView', ['views/ProtoView', 'views/IconEditView', 'underscore'], function(ProtoView, IconEditView, _) {
    var IconView, _ref;

    IconView = (function(_super) {
      __extends(IconView, _super);

      function IconView() {
        _ref = IconView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      IconView.prototype.template = '#icon-template';

      IconView.prototype.className = '';

      IconView.prototype.id = 'js-icon';

      IconView.prototype.bindings = {
        '#type': 'type',
        '#guid': 'guid',
        '#xCoord': 'xCoord',
        '#yCoord': 'yCoord',
        '#hover-xCoord': 'xCoordHover',
        '#hover-yCoord': 'yCoordHover',
        '#class': {
          observe: 'class',
          onSet: 'setValueClass'
        },
        '#name': {
          observe: 'name',
          onSet: 'setValueName'
        }
      };

      IconView.prototype.events = {
        'click #js-delete': 'toggleDelete',
        'click #js-hover-state': 'toggleHoverState',
        'click #js-expand': 'expand'
      };

      IconView.prototype.initialize = function() {
        IconView.__super__.initialize.apply(this, arguments);
        this.index = this.model.collection.indexOf(this.model);
        this.model.set('isMainIcon', 0 === this.index);
        !this.model.get('isMainIcon') && this.listenToCollectionName();
        this.model.set('isCurrent', this.model.get('isMainIcon') ? true : false);
        this.listenToCollectionNameAll();
        this.model.get('isMainIcon') && (this.model.collection.mainIcon = this.model);
        this.model.get('isMainIcon') && (this.model.collection["class"] = this.model.get('class'));
        this.model.get('isMainIcon') && (this.model.collection.name = this.model.get('name'));
        this.model.setRelativeCoordinates(this.index);
        this.validateName();
        this.model.on('change:isCurrent', this.render);
        this.model.on('change:isDeleted', this.render);
        this.model.on('change:isCollectionDeleted', this.render);
        this.model.on('change:hoverState', this.render);
        this.model.on('change:isNameValid', this.render);
        this.model.on('change:class', this.render);
        this.model.on('change:xCoord', _.bind(this.changeCoords, this));
        this.model.on('change:yCoord', _.bind(this.changeCoords, this));
        this.model.on('change:xCoordHover', _.bind(this.delayedRender, this));
        this.model.on('change:yCoordHover', _.bind(this.delayedRender, this));
        return this;
      };

      IconView.prototype.render = function() {
        this.wasFocusedId = this.$(':focus').attr('id');
        IconView.__super__.render.apply(this, arguments);
        this.stickit();
        this.renderInit();
        this.$("#" + this.wasFocusedId).focus();
        return this;
      };

      IconView.prototype.validateName = function() {
        var _ref1;

        return (_ref1 = this.model) != null ? _ref1.validateName() : void 0;
      };

      IconView.prototype.toggleHoverState = function() {
        this.model.toggleHoverState();
        return this.$('.icon-sample-b').addClass('is-expand');
      };

      IconView.prototype.changeCoords = function() {
        this.delayedRender();
        return this.model.get('isMainIcon') && $(this.model.collection).trigger('change:coords');
      };

      IconView.prototype.delayedRender = function() {
        var _this = this;

        clearTimeout(this.delayedRenderTimeout);
        return this.delayedRenderTimeout = setTimeout(function() {
          _this.wasFocusedId = _this.$(':focus').attr('id');
          _this.render();
          return _this.$("#" + _this.wasFocusedId).focus();
        }, 300);
      };

      IconView.prototype.listenToCollectionNameAll = function() {
        var _this = this;

        return $(this.model.collection).on('set:current', function(view) {
          return _this.model.set('isCurrent', false);
        });
      };

      IconView.prototype.listenToCollectionName = function() {
        var _this = this;

        $(this.model.collection).on('change:coords', function() {
          !_this.model.get('isMainIcon') && _this.model.setRelativeCoordinates(_this.index);
          return !_this.model.get('isMainIcon') && _this.delayedRender();
        });
        $(this.model.collection).on('delete', function() {
          return _this.model.set('isCollectionDeleted', true);
        });
        $(this.model.collection).on('restore', function() {
          return _this.model.set('isCollectionDeleted', false);
        });
        App.vent.on('change:adds', function(adds) {
          var _ref1, _ref2;

          _this.model.set('class', "" + (_this.model.collection["class"] || '') + ".is-" + (((_ref1 = App.iconsCollection.pattern) != null ? _ref1['class'][_this.index] : void 0) || ''));
          return _this.model.set('name', "" + (_this.model.collection.name || '') + " " + (((_ref2 = App.iconsCollection.pattern) != null ? _ref2['name'][_this.index] : void 0) || ''));
        });
        $(this.model.collection).on('set:class', function() {
          var _ref1;

          return _this.model.set('class', "" + _this.model.collection["class"] + ".is-" + (((_ref1 = App.iconsCollection.pattern) != null ? _ref1['class'][_this.index] : void 0) || ''));
        });
        return $(this.model.collection).on('set:name', function() {
          var _ref1;

          return _this.model.set('name', "" + _this.model.collection.name + " " + (((_ref1 = App.iconsCollection.pattern) != null ? _ref1['name'][_this.index] : void 0) || ''));
        });
      };

      IconView.prototype.renderInit = function() {};

      IconView.prototype.toggleDelete = function() {
        var _this = this;

        if (this.model.get('isDeleted') === true) {
          clearTimeout(this.preDeleteTimeout);
          this.model.set('isDeleted', false);
          this.model.get('isMainIcon') && $(this.model.collection).trigger('restore');
        } else {
          this.model.set('isDeleted', true);
          this.model.get('isMainIcon') && $(this.model.collection).trigger('delete');
          this.preDeleteTimeout = setTimeout(function() {
            _this["delete"]();
            return _this.renderPreview();
          }, 10000);
        }
        return this.renderPreview();
      };

      IconView.prototype.renderPreview = function() {
        return App.vent.trigger('change:preview');
      };

      IconView.prototype["delete"] = function() {
        if (!this.model.get('isMainIcon')) {
          return this.model.destroy();
        } else {
          return this.model.collection.reset();
        }
      };

      IconView.prototype.restore = function() {
        this.model.set('isDeleted', false);
        this.model.get('isMainIcon') && $(this.model.collection).trigger('restore');
        return clearTimeout(this.preDeleteTimeout);
      };

      IconView.prototype.expand = function() {
        return this.$('.icon-sample-b').toggleClass('is-expand');
      };

      IconView.prototype.setValueClass = function(val, o) {
        var className, prefix;

        prefix = "is-" + App.iconsCollection.theme + "__";
        val = val.replace("" + prefix, '');
        className = "" + prefix + val;
        if (this.model.get('isMainIcon')) {
          this.model.collection["class"] = className;
          $(this.model.collection).trigger('set:class');
        }
        if (val) {
          return className;
        } else {
          return '';
        }
      };

      IconView.prototype.setValueName = function(val, o) {
        if (this.model.get('isMainIcon')) {
          this.model.collection.name = val;
          $(this.model.collection).trigger('set:name');
        }
        return val;
      };

      return IconView;

    })(ProtoView);
    return IconView;
  });

}).call(this);
