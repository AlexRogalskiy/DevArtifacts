// Generated by CoffeeScript 1.6.2
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define('views/pages/edit', ['views/pages/PageView', 'text!themes', 'underscore', 'views/Constructor', 'models/constructor-model', 'views/notifier'], function(PageView, themesText, _, Constructor, ConstructorModel, notifier) {
    var Edit, _ref;

    Edit = (function(_super) {
      __extends(Edit, _super);

      function Edit() {
        _ref = Edit.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      Edit.prototype.template = '#edit-page-template';

      Edit.prototype.events = {
        'change #js-select-place': 'changeTheme',
        'click  #js-add-icon-collection': 'addIconCollection'
      };

      Edit.prototype.initialize = function(o) {
        this.o = o != null ? o : {};
        if (!App.themes) {
          App.themes = $.parseJSON(themesText);
          App.themes = $.parseJSON(App.themes.data);
        }
        $('#js-generate').show();
        $('.js-nav-link').eq(1).addClass('is-check');
        return this;
      };

      Edit.prototype.render = function() {
        Edit.__super__.render.apply(this, arguments);
        this.renderInit();
        return this;
      };

      Edit.prototype.renderInit = function() {
        return this.renderSelect();
      };

      Edit.prototype.renderSelect = function() {
        var i, options, theme;

        options = '';
        i = 0;
        for (theme in App.themes) {
          i++ || (this.currentThemeName = theme);
          options += "<option value='" + theme + "'> " + theme + " </option>";
        }
        this.$('#js-select-place').html(options);
        return this.showCurrentTheme();
      };

      Edit.prototype.changeTheme = function() {
        this.currentThemeName = this.$('#js-select-place').find(':selected').val();
        return this.showCurrentTheme();
      };

      Edit.prototype.showCurrentTheme = function(type) {
        var _this = this;

        this.initFileUpload();
        this.currentTheme = App.themes[this.currentThemeName];
        return _.defer(function() {
          _this.constructorModel = null;
          _this.constructor = null;
          if (_this.currentTheme != null) {
            _this.constructorModel = new ConstructorModel({
              url: _this.currentTheme.image,
              themes: App.themes
            });
            _this.constructor = new Constructor({
              model: _this.constructorModel,
              mode: 'edit',
              theme: _this.currentTheme,
              type: type
            });
            App.addRegions({
              constructor: '#js-constructor-region'
            });
            return App.constructor.show(_this.constructor);
          } else {
            return notifier.add({
              text: 'There is no data to edit',
              type: 'warning'
            });
          }
        });
      };

      Edit.prototype.initFileUpload = function() {
        var _this = this;

        this.$('#fileupload').fileupload({
          url: 'php/',
          acceptFileTypes: /(\.|\/)(gif|jpe?g|png)$/i,
          dataType: 'json',
          limitMultiFileUploads: 1,
          done: function(e, data) {
            return _this.loadImage(_this.currentTheme.image).then(function(oldImg) {
              return _this.loadImage(data.result.files[0].url).then(function(newImg) {
                if (oldImg.width > newImg.width || oldImg.height > newImg.height) {
                  if (confirm('New image is smaller than previous, so data can be lost. Are you sure to proceed?')) {
                    return _this.changeImage(data);
                  }
                } else {
                  return _this.changeImage(data);
                }
              });
            });
          },
          progressall: function(e, data) {
            console.log('progress');
            return false;
          }
        });
        return this;
      };

      Edit.prototype.changeImage = function(data) {
        this.currentTheme.image = data.result.files[0].url;
        return this.showCurrentTheme('change-image');
      };

      Edit.prototype.loadImage = function(image) {
        var dfr;

        dfr = new $.Deferred;
        this.$img = $('<img>').on('load', function() {
          return dfr.resolve(this);
        });
        this.$img[0].src = image;
        return dfr.promise();
      };

      Edit.prototype.addIconCollection = function() {
        var model;

        model = App.iconsCollectionWrapped.at(App.iconsCollectionWrapped.length - 1);
        return App.iconsCollectionWrapped.add(model.toJSON());
      };

      return Edit;

    })(PageView);
    return Edit;
  });

}).call(this);
