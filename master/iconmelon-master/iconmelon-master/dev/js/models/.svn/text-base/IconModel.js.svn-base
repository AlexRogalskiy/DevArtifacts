// Generated by CoffeeScript 1.6.2
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define('models/IconModel', ['models/ProtoModel', 'md5'], function(ProtoModel, md5) {
    var IconModel, _ref;

    IconModel = (function(_super) {
      __extends(IconModel, _super);

      function IconModel() {
        _ref = IconModel.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      IconModel.prototype.defaults = {
        isDeleted: false,
        isCurrent: false,
        isCollectionDeleted: false,
        hoverState: false,
        xCoordHover: false,
        yCoordHover: false,
        isNameValid: false
      };

      IconModel.prototype.initialize = function() {
        this.set('guid', md5(new Date() + new Date().getMilliseconds() + Math.random(999999) + Math.random(999999)));
        return this.on('change:name', this.validateName);
      };

      IconModel.prototype.validateName = function() {
        var iconCollection, name, valid, _i, _len, _ref1,
          _this = this;

        name = $.trim(this.get('name'));
        valid = true;
        _ref1 = App.iconsCollection.collectionData;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          iconCollection = _ref1[_i];
          iconCollection.each(function(model) {
            if ($.trim(model.get('name')) === name && _this !== model && _this.get('isMainIcon') && model.get('isMainIcon')) {
              return valid = false;
            }
          });
        }
        if (!name.length) {
          valid = false;
        }
        return this.set('isNameValid', valid);
      };

      IconModel.prototype.setRelativeCoordinates = function(index) {
        if (!this.get('isMainIcon')) {
          this.set('yCoord', index + ~~this.collection.mainIcon.get('yCoord'));
          return this.set('xCoord', this.collection.mainIcon.get('xCoord'));
        }
      };

      IconModel.prototype.toggleHoverState = function() {
        if (this.get('hoverState')) {
          return this.set('hoverState', false);
        } else {
          this.set('hoverState', true);
          return this.setHoverToMainCoords();
        }
      };

      IconModel.prototype.setHoverToMainCoords = function() {
        this.set('xCoordHover', this.get('xCoord'));
        return this.set('yCoordHover', this.get('yCoord'));
      };

      return IconModel;

    })(ProtoModel);
    return IconModel;
  });

}).call(this);
