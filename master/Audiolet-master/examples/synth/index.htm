<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <title>Audiolet - Synth</title>
    <!-- Production -->
    <!--
    <script src="../../src/audiolet/Audiolet.min.js"></script>
    -->

    <!-- Development -->
    <script src="../../src/audiolet/Audiolet.js"></script>

    <!-- Common -->
    <script src="js/synth.js"></script>
    <link rel="stylesheet" href="../support/main.css" />
    <link href='http://fonts.googleapis.com/css?family=Lato:400,700|Inconsolata' rel='stylesheet' type='text/css'>
  </head>
  <body>
    <div id="wrap">
      <header>
        <h1>Audiolet - Synth Example</h1>
      </header>
      <section id="abstract">
        <p>A sequenced synthesizer with an automated filter and volume envelope.</p>
      </section>
      <section id="play">
        <button type="button" onclick="playExample()">&#9654; Play Example</button>
      </section>
      <section class="code-block">
        <pre><h2>js/synth.js</h2>
          <code>
function playExample() {
    var Synth = function(audiolet) {
        AudioletGroup.apply(this, [audiolet, 0, 1]);
        // Basic wave
        this.saw = new Saw(audiolet, 100);

        // Frequency LFO
        this.frequencyLFO = new Sine(audiolet, 2);
        this.frequencyMA = new MulAdd(audiolet, 10, 100);

        // Filter
        this.filter = new LowPassFilter(audiolet, 1000);

        // Filter LFO
        this.filterLFO = new Sine(audiolet, 8);
        this.filterMA = new MulAdd(audiolet, 900, 1000);

        // Gain envelope
        this.gain = new Gain(audiolet);
        this.env = new ADSREnvelope(audiolet,
                                    1, // Gate
                                    1.5, // Attack
                                    0.2, // Decay
                                    0.9, // Sustain
                                    2); // Release

        // Main signal path
        this.saw.connect(this.filter);
        this.filter.connect(this.gain);
        this.gain.connect(this.outputs[0]);

        // Frequency LFO
        this.frequencyLFO.connect(this.frequencyMA);
        this.frequencyMA.connect(this.saw);

        // Filter LFO
        this.filterLFO.connect(this.filterMA);
        this.filterMA.connect(this.filter, 0, 1);

        // Envelope
        this.env.connect(this.gain, 0, 1);
    };
    extend(Synth, AudioletGroup);

    var audiolet = new Audiolet();
    var synth = new Synth(audiolet);

    var frequencyPattern = new PSequence([55, 55, 98, 98, 73, 73, 98, 98],
                                         Infinity);
    var filterLFOPattern = new PChoose([2, 4, 6, 8], Infinity);
    var gatePattern = new PSequence([1, 0], Infinity);

    var patterns = [frequencyPattern, filterLFOPattern, gatePattern];
    audiolet.scheduler.play(patterns, 2,
        function(frequency, filterLFOFrequency, gate) {
            this.frequencyMA.add.setValue(frequency);
            this.filterLFO.frequency.setValue(filterLFOFrequency);
            this.env.gate.setValue(gate);
        }.bind(synth)
    );

    synth.connect(audiolet.output);
};</code></pre>
      </section>
    </div>
    <footer>
        &copy; 2011 <a href="http://oampo.github.com/Audiolet/" target="_blank">Audiolet</a> &mdash; Code Highlighting by <a href="https://github.com/cloudhead/hijs" target="_blank">hijs</a>
      </footer>
    <script src="../support/hijs.js" type="text/javascript" charset="utf-8"></script>
  </body>
</html>