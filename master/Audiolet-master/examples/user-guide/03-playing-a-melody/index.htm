<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <title>Scheduling and Patterns</title>
    <!-- Production -->
    <!--
    <script src="../../../src/audiolet/Audiolet.min.js"></script>
    -->

    <!-- Development -->
    <script src="../../../src/audiolet/Audiolet.js"></script>

    <!-- Common -->
    <script src="js/audiolet_app_finished.js"></script>
    <link rel="stylesheet" href="../../support/main.css" />
    <link href='http://fonts.googleapis.com/css?family=Lato:400,700|Inconsolata' rel='stylesheet' type='text/css'>
  </head>
  <body>
    <div id="wrap">
      <header>
        <h1>Audiolet - Playing a Melody</h1>
      </header>
      <section id="abstract">
        <p>Audiolet Getting Started - <a href="https://github.com/oampo/Audiolet/wiki/Your-First-Synth" target="_blank">Part Three</a>: Learn about scheduling and patterns</p>
      </section>
      <section id="play">
        <button type="button" onclick="playExample()">&#9654; Play Example</button>
      </section>
      <section class="code-block">
        <pre><h2>js/audiolet_app_finished.js</h2>
          <code>
function playExample() {
    var Synth = function(audiolet, frequency) {
        AudioletGroup.apply(this, [audiolet, 0, 1]);
        this.sine = new Sine(this.audiolet, frequency);
        this.modulator = new Saw(this.audiolet, frequency * 2);
        this.modulatorMulAdd = new MulAdd(this.audiolet, frequency / 2,
                                          frequency);

        this.gain = new Gain(this.audiolet);
        this.envelope = new PercussiveEnvelope(this.audiolet, 1, 0.2, 0.5,
            function() {
                this.audiolet.scheduler.addRelative(0, this.remove.bind(this));
            }.bind(this)
        );

        this.modulator.connect(this.modulatorMulAdd);
        this.modulatorMulAdd.connect(this.sine);

        this.envelope.connect(this.gain, 0, 1);
        this.sine.connect(this.gain);

        this.gain.connect(this.outputs[0]);
    };
    extend(Synth, AudioletGroup);

    var AudioletApp = function() {
        this.audiolet = new Audiolet();

        var melodyA = new PSequence([262, 294, 330, 349]);
        var melodyB = new PSequence([349, 330, 349, 392]);
        var melodyC = new PSequence([440, 392, 349, 330]);
        var frequencyPattern = new PChoose([melodyA, melodyB, melodyC],
                                           Infinity);

        var durationPattern = new PChoose([new PSequence([4, 1, 1, 2]),
                                           new PSequence([2, 2, 1, 3]),
                                           new PSequence([1, 1, 1, 1])],
                                          Infinity);

        this.audiolet.scheduler.play([frequencyPattern], durationPattern,
            function(frequency) {
                var synth = new Synth(this.audiolet, frequency);
                synth.connect(this.audiolet.output);
            }.bind(this)
        );
    };

    this.audioletApp = new AudioletApp();
};</code></pre>
      </section>
    </div>
    <footer>
        &copy; 2011 <a href="http://oampo.github.com/Audiolet/" target="_blank">Audiolet</a> &mdash; Code Highlighting by <a href="https://github.com/cloudhead/hijs" target="_blank">hijs</a>
      </footer>
    <script src="../../support/hijs.js" type="text/javascript" charset="utf-8"></script>
  </body>
</html>