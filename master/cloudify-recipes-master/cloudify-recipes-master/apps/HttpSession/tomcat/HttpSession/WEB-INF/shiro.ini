[main]
# space proxy wraper
connector = com.gigaspaces.httpsession.SpaceConnector
connector.url = %SPACE_URL%
# When using secured GigaSpace cluster, pass the credentials here
# connector.username = gs
# connector.password = gs
# Default lease is 30 minutes - 30 * 60 * 1000 = 1800000
connector.sessionLease = 1800000

#sessionManager = org.apache.shiro.web.session.mgt.StandardWebSessionManager
#sessionManager = org.apache.shiro.web.session.mgt.DefaultWebSessionManager
sessionManager = com.gigaspaces.httpsession.GigaWebSessionManager

#set the sessionManager to use an enterprise cache for backing storage:
sessionDAO = org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO
sessionManager.sessionDAO = $sessionDAO

sessionDAO.activeSessionsCacheName = %SPACE_URL%
# ensure the securityManager uses our native SessionManager:
securityManager.sessionManager = $sessionManager

# whatever your CacheManager implementation is, for example:
cacheManager = com.gigaspaces.httpsession.sessions.GigaCacheManager

# Compression service
#compressor = com.gigaspaces.httpsession.serialize.DefaultCompressor
#cacheManager.compressor = $compressor
# Model Manager service
#changePolicy = com.gigaspaces.httpsession.policies.LastWriteWinsPolicy
modelManager = com.gigaspaces.httpsession.models.FullModelManager
#modelManager.connector = $connector
#modelManager.changePolicy = $changePolicy

cacheManager.modelManager = $modelManager
# Serialization Service
serializer = com.gigaspaces.httpsession.serialize.KryoSerializerImpl
serializer.logLevel = 1
#### classes registation: class1, class2, ...,classN
#serializer.classes = com.gigaspaces.httpsession.sessions.NestSerial , com.gigaspaces.httpsession.sessions.NestNonSerial
cacheManager.serializer = $serializer
# Session Policy Service
policy = com.gigaspaces.httpsession.policies.SessionPolicyWithoutLogin
policy.connector = $connector
policy.modelManager = $modelManager

cacheManager.policy = $policy
# space proxy setter
cacheManager.connector= $connector
# When using Externalizable classes with customized serialization and want to stick to serialization based on Reflection enable this option
# Default value is false
cacheManager.registerReflectionConverter = true

# List of XStream converters that application would like to register 
# (Expecting that these are part of classpath or WEB-INF/lib)
# Pass them comma separated
cacheManager.converterNameList = com.gigaspaces.xtreme.converter.XmlCalendarConverter

# This will use GigaSpaces for _all_ of Shiro's caching needs (realms, etc), # not just for Session storage.
securityManager.cacheManager = $cacheManager

# Session validation
sessionValidationScheduler = org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler

# Session timeout  
securityManager.sessionManager.defaultSessionTimeout = 1800000

# Default is 3,600,000 millis = 1 hour:
sessionValidationScheduler.interval = 1800000

sessionValidationScheduler.sessionManager = $sessionManager

securityManager.sessionManager.sessionValidationScheduler = $sessionValidationScheduler
