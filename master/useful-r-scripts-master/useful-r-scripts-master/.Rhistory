library(tidyquant)
library(timekit)
library(timetk)
# Collect data and convert to yearmon regularized monthly data
beer_sales <- tq_get("S4248SM144NCEN", get = "economic.data", from = "2000-01-01")
beer_sales <- beer_sales %>%
    mutate(date = as.yearmon(date))
# Build training set and actual_future for comparison
train <- beer_sales %>%
    filter(date < 2014)
actual_future <- beer_sales %>%
    filter(date >= 2014)
# Add time series signature to training set
train <- train %>%
    tk_augment_timeseries_signature()
# Fit the linear regression model to predict price variable
fit_lm <- lm(price ~ ., data = train[,-1])
# Create the new date following the 3 steps
new_data <- train %>%
    tk_index() %>%
    tk_make_future_timeseries(n_future = 38) %>%
    tk_get_timeseries_signature()
# Make predictions using predict
pred_lm <- predict(object = fit_lm, newdata = new_data)
# Add predictions to actual_future
actual_future <- actual_future %>%
    add_column(yhat = pred_lm) 
# Plot using ggplot
actual_future %>%
    ggplot(aes(x = date)) +
    geom_line(aes(y = price), data = train, color = palette_light()[[1]]) +
    geom_line(aes(y = price), color = palette_light()[[1]]) +
FB_tbl <- FANG %>%
    filter(symbol == "FB")
FB_tbl
idx <- tk_index(FB_tbl)
head(idx)
tk_get_timeseries_signature(idx)
tk_get_timeseries_summary(idx)[1:6]
tk_get_timeseries_summary(idx)[6:12]
holidays <- c("2017-01-02", "2017-01-16", "2017-02-20",
              "2017-04-14", "2017-05-29", "2017-07-04",
              "2017-09-04", "2017-11-23", "2017-12-25") %>%
    ymd()
idx_future <- tk_make_future_timeseries(
    idx, 
    n_future         = 366, 
    skip_values      = holidays, 
    inspect_weekdays = TRUE) 
head(idx_future)
tail(idx_future)
library(tidyquant)
library(timetk)
library(broom)
bikes <- read_csv("bikes <- read_csv("~/Downloads/Bike-Sharing-Dataset/day.csv")
bikes <- read_csv("/Users/mkoltsov/Downloads/Bike-Sharing-Dataset/day.csv")
bikes <- bikes %>%
    select(dteday, cnt) %>%
    rename(date = dteday)
bikes %>%
    ggplot(aes(x = date, y = cnt)) +
    geom_rect(xmin = as.numeric(ymd("2012-07-01")),
              xmax = as.numeric(ymd("2013-01-01")),
              ymin = 0, ymax = 10000,
              fill = palette_light()[[4]], alpha = 0.01) +
    annotate("text", x = ymd("2011-10-01"), y = 7800,
             color = palette_light()[[1]], label = "Train Region") +
    annotate("text", x = ymd("2012-10-01"), y = 1550,
             color = palette_light()[[1]], label = "Test Region") +
    geom_point(alpha = 0.5, color = palette_light()[[1]]) +
    labs(title = "Bikes Sharing Dataset: Daily Scale", x = "") +
    theme_tq()
train <- bikes %>%
    filter(date < ymd("2012-07-01"))
test <- bikes %>%
    filter(date >= ymd("2012-07-01"))
train
train_augmented <- train %>%
    tk_augment_timeseries_signature()
train_augmented
fit_lm <- lm(cnt ~ ., data = train_augmented)
fit_lm %>%
    augment() %>%
    ggplot(aes(x = date, y = .resid)) +
    geom_hline(yintercept = 0, color = "red") +
    geom_point(color = palette_light()[[1]], alpha = 0.5) +
    theme_tq() +
    labs(title = "Training Set: lm() Model Residuals", x = "") +
    scale_y_continuous(limits = c(-5000, 5000))
test
test_augmented <- test %>%
    tk_augment_timeseries_signature()
test_augmented
yhat_test <- predict(fit_lm, newdata = test_augmented)
pred_test <- test %>%
    add_column(yhat = yhat_test) %>%
    mutate(.resid = cnt - yhat)
pred_test
ggplot(aes(x = date), data = bikes) +
    geom_rect(xmin = as.numeric(ymd("2012-07-01")),
              xmax = as.numeric(ymd("2013-01-01")),
              ymin = 0, ymax = 10000,
              fill = palette_light()[[4]], alpha = 0.01) +
    annotate("text", x = ymd("2011-10-01"), y = 7800,
             color = palette_light()[[1]], label = "Train Region") +
    annotate("text", x = ymd("2012-10-01"), y = 1550,
             color = palette_light()[[1]], label = "Test Region") + 
    geom_point(aes(x = date, y = cnt), data = train, alpha = 0.5, color = palette_light()[[1]]) +
    geom_point(aes(x = date, y = cnt), data = pred_test, alpha = 0.5, color = palette_light()[[1]]) +
    geom_point(aes(x = date, y = yhat), data = pred_test, alpha = 0.5, color = palette_light()[[2]]) +
    theme_tq() 
# Extract bikes index
idx <- bikes %>%
    tk_index()
# Get time series summary from index
bikes_summary <- idx %>%
    tk_get_timeseries_summary()
bikes_summary[1:6]
idx_future <- idx %>%
    tk_make_future_timeseries(n_future = 180)
data_future <- idx_future %>%
    tk_get_timeseries_signature() %>%
    rename(date = index)
pred_future <- predict(fit_lm, newdata = data_future)
bikes_future <- data_future %>%
    select(date) %>%
    add_column(cnt = pred_future)
bikes %>%
    ggplot(aes(x = date, y = cnt)) +
    geom_rect(xmin = as.numeric(ymd("2012-07-01")),
              xmax = as.numeric(ymd("2013-01-01")),
              ymin = 0, ymax = 10000,
              fill = palette_light()[[4]], alpha = 0.01) +
    geom_rect(xmin = as.numeric(ymd("2013-01-01")),
              xmax = as.numeric(ymd("2013-07-01")),
              ymin = 0, ymax = 10000,
              fill = palette_light()[[3]], alpha = 0.01) +
    annotate("text", x = ymd("2011-10-01"), y = 7800,
             color = palette_light()[[1]], label = "Train Region") +
    annotate("text", x = ymd("2012-10-01"), y = 1550,
             color = palette_light()[[1]], label = "Test Region") +
    annotate("text", x = ymd("2013-4-01"), y = 1550,
             color = palette_light()[[1]], label = "Forecast Region") +
    geom_point(alpha = 0.5, color = palette_light()[[1]]) +
    geom_point(aes(x = date, y = cnt), data = bikes_future,
               alpha = 0.5, color = palette_light()[[2]]) +
    geom_smooth(aes(x = date, y = cnt), data = bikes_future,
                method = 'loess') + 
    labs(title = "Bikes Sharing Dataset: 6-Month Forecast", x = "") +
    theme_tq()
